import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime
import json
import os
import openai
import base64
import tempfile
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞ .env
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ",
    page_icon="üß†",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
# –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —à–∫–∞–ª
THRESHOLDS = {
    "low": (3, 7),
    "medium": (8, 11),
    "high": (12, 15)
}

# –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤

# –°–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
SCREENING_QUESTIONS = {
    "aggression": [
        {"id": "ag1", "text": "–ò–Ω–æ–≥–¥–∞ —è –Ω–µ –º–æ–≥—É —Å–¥–µ—Ä–∂–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ —É–¥–∞—Ä–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."},
        {"id": "ag2", "text": "–Ø –±—ã—Å—Ç—Ä–æ –≤—Å–ø—ã—Ö–∏–≤–∞—é, –Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –æ—Å—Ç—ã–≤–∞—é."},
        {"id": "ag3", "text": "–Ø —Ä–∞–∑–¥—Ä–∞–∂–∞—é—Å—å, –∫–æ–≥–¥–∞ —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è."}
    ],
    "isolation": [
        {"id": "is1", "text": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –æ–¥–∏–Ω–æ–∫–∏–º."},
        {"id": "is2", "text": "–ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—â–µ–Ω–∏—è."},
        {"id": "is3", "text": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç –¥—Ä—É–≥–∏—Ö."}
    ],
    "somatic": [
        {"id": "som1", "text": "–ò–Ω–æ–≥–¥–∞ –º–µ–Ω—è –æ—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ —É–∂–∞—Å–∞"},
        {"id": "som2", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —è –Ω–µ –º–æ–≥—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏"},
        {"id": "som3", "text": "–Ø –Ω–µ –º–æ–≥—É —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è"}
    ],
    "anxiety": [
        {"id": "anx1", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å, –º–Ω–µ –Ω–µ –ø–æ —Å–µ–±–µ"},
        {"id": "anx2", "text": "–£ –º–µ–Ω—è –±—ã–≤–∞–µ—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –ø–∞–Ω–∏–∫–∏"},
        {"id": "anx3", "text": "–ë–µ—Å–ø–æ–∫–æ–π–Ω—ã–µ –º—ã—Å–ª–∏ –∫—Ä—É—Ç—è—Ç—Å—è —É –º–µ–Ω—è –≤ –≥–æ–ª–æ–≤–µ"}
    ],
    "stability": [
        {"id": "stab1", "text": "–í—Ä–µ–º–µ–Ω–∞–º–∏ —è –±—ã–≤–∞—é —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–π –Ω–∏–∫—á–µ–º–Ω–æ—Å—Ç–∏."},
        {"id": "stab2", "text": "–ß–∞—Å—Ç–æ —è –ø–µ—Ä–µ—Ö–æ–∂—É –Ω–∞ –¥—Ä—É–≥—É—é —Å—Ç–æ—Ä–æ–Ω—É —É–ª–∏—Ü—ã, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –≤—Å—Ç—Ä–µ—á–∏ —Å —á–µ–ª–æ–≤–µ–∫–æ–º, –∫–æ—Ç–æ—Ä–æ–≥–æ —è –Ω–µ –∂–µ–ª–∞—é –≤–∏–¥–µ—Ç—å."},
        {"id": "stab3", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –±–ª–∏–∑–æ–∫ –∫ –Ω–µ—Ä–≤–Ω–æ–º—É —Å—Ä—ã–≤—É."}
    ],
    "sincerity": [
        {"id": "sin1", "text": "–ë—ã–≤–∞–ª–æ, —á—Ç–æ —è –≥–æ–≤–æ—Ä–∏–ª –æ –≤–µ—â–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å."},
        {"id": "sin2", "text": "–ë—ã–≤–∞–µ—Ç, —á—Ç–æ —è —Å–µ—Ä–∂—É—Å—å."},
        {"id": "sin3", "text": "–ò–Ω–æ–≥–¥–∞ —è –≥–æ–≤–æ—Ä—é –Ω–µ–ø—Ä–∞–≤–¥—É."}
    ]
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —à–∫–∞–ª —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º
MEDIUM_RISK_QUESTIONS = {
    "aggression": [
        {"id": "ag_med1", "text": "–Ø –¥–µ—Ä—É—Å—å —á–∞—à–µ, —á–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ."},
        {"id": "ag_med2", "text": "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∏ –¥—Ä—É–∑—å—è —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ —è –≤—Å–ø—ã–ª—å—á–∏–≤."},
        {"id": "ag_med3", "text": "–ò–Ω–æ–≥–¥–∞ —è –≤—ã—Ö–æ–∂—É –∏–∑ —Å–µ–±—è –±–µ–∑ –æ—Å–æ–±–æ–π –ø—Ä–∏—á–∏–Ω—ã."},
        {"id": "ag_med4", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ —Å–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ."},
        {"id": "ag_med5", "text": "–ò–Ω–æ–≥–¥–∞ —è –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–∏–ª –∏–∑ —Å–µ–±—è, —á—Ç–æ –ª–æ–º–∞–ª –≤–µ—â–∏."}
    ],
    "isolation": [
        {"id": "is_med1", "text": "–Ø –Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤, –∑–∞–Ω–∏–º–∞—è—Å—å —Å—Ç–æ–ª—å–∫–∏–º–∏ –≤–µ—â–∞–º–∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É."},
        {"id": "is_med2", "text": "–ú–Ω–µ –Ω–µ —Å –∫–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å."},
        {"id": "is_med3", "text": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–∫–∏–Ω—É—Ç—ã–º."},
        {"id": "is_med4", "text": "–Ø —É–º–∏—Ä–∞—é –ø–æ –∫–æ–º–ø–∞–Ω–∏–∏."},
        {"id": "is_med5", "text": "–Ø –Ω–µ—Å—á–∞—Å—Ç–µ–Ω, –±—É–¥—É—á–∏ —Ç–∞–∫–∏–º –æ—Ç–≤–µ—Ä–∂–µ–Ω–Ω—ã–º."},
        {"id": "is_med6", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ –∑–∞–≤–æ–¥–∏—Ç—å –¥—Ä—É–∑–µ–π."}
    ],
    "somatic": [
        {"id": "som_med1", "text": "–ò–Ω–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–≤–∞–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ"},
        {"id": "som_med2", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —É –º–µ–Ω—è —É–¥—É—à—å–µ"},
        {"id": "som_med3", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —É –º–µ–Ω—è –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ"},
        {"id": "som_med4", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é —Å—Ç—Ä–∞—Ö —Å–º–µ—Ä—Ç–∏"},
        {"id": "som_med5", "text": "–ò—Å–ø—É–≥"},
        {"id": "som_med6", "text": "–ò–Ω–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–≤–∞—é—Ç –∂–µ–ª—É–¥–æ—á–Ω–æ-–∫–∏—à–µ—á–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞"}
    ],
    "anxiety": [
        {"id": "anx_med1", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —Å—Ç—Ä–∞—Ö, –∫–∞–∂–µ—Ç—Å—è, –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ —É–∂–∞—Å–Ω–æ–µ –º–æ–∂–µ—Ç –≤–æ—Ç-–≤–æ—Ç —Å–ª—É—á–∏—Ç—å—Å—è"},
        {"id": "anx_med2", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä–æ–∂—å"},
        {"id": "anx_med3", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –Ω–µ—É—Å–∏–¥—á–∏–≤–æ—Å—Ç—å, —Å–ª–æ–≤–Ω–æ –º–Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω—É–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è"},
        {"id": "anx_med4", "text": "–¢–æ, —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏–ª–æ –º–Ω–µ –±–æ–ª—å—à–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –∏ —Å–µ–π—á–∞—Å –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è —Ç–∞–∫–æ–µ –∂–µ —á—É–≤—Å—Ç–≤–æ"},
        {"id": "anx_med5", "text": "–Ø –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç —Ö–æ—Ä–æ—à–µ–π –∫–Ω–∏–≥–∏, —Ä–∞–¥–∏–æ- –∏–ª–∏ —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º—ã"}
    ],
    "stability": [
        {"id": "stab_med1", "text": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Å—É–¥—å–±–∞ –Ω–µ –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞ –∫–æ –º–Ω–µ."},
        {"id": "stab_med2", "text": "–Ø –ª–µ–≥–∫–æ —Ç–µ—Ä—è—é —Ç–µ—Ä–ø–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏."},
        {"id": "stab_med3", "text": "–ï—Å–ª–∏ –±—ã –ª—é–¥–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è, —è –¥–æ—Å—Ç–∏–≥ –±—ã –≤ –∂–∏–∑–Ω–∏ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ–≥–æ."},
        {"id": "stab_med4", "text": "–ò–Ω–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ –ø–µ—Ä–µ–¥–æ –º–Ω–æ–π –Ω–∞–≥—Ä–æ–º–æ–∑–¥–∏–ª–æ—Å—å —Å—Ç–æ–ª—å–∫–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π, —á—Ç–æ –æ–¥–æ–ª–µ—Ç—å –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."},
        {"id": "stab_med5", "text": "–Ø —á–∞—Å—Ç–æ —Ä–∞–±–æ—Ç–∞–ª –ø–æ–¥ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ–º –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–º–µ–ª–∏ –ø–æ–≤–µ—Ä–Ω—É—Ç—å –¥–µ–ª–æ —Ç–∞–∫, —á—Ç–æ –≤—Å–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –≤ —Ä–∞–±–æ—Ç–µ –ø—Ä–∏–ø–∏—Å—ã–≤–∞–ª–∏—Å—å –∏–º, –∞ –≤–∏–Ω–æ–≤–∞—Ç—ã–º–∏ –≤ –æ—à–∏–±–∫–∞—Ö –æ–∫–∞–∑—ã–≤–∞–ª–∏—Å—å –¥—Ä—É–≥–∏–µ."},
        {"id": "stab_med6", "text": "–Ø —á–∞—Å—Ç–æ –ø—Ä–µ–¥–∞—é—Å—å –≥—Ä—É—Å—Ç–Ω—ã–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º."},
        {"id": "stab_med7", "text": "–£ –º–µ–Ω—è —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç –ø–æ–¥—ä–µ–º—ã –∏ —Å–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."}
    ]
}

# –ü–æ–ª–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ –¥–ª—è —à–∫–∞–ª —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
# –î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤–∫–ª—é—á–∏–º —Ç–æ–ª—å–∫–æ —á–∞—Å—Ç—å –≤–æ–ø—Ä–æ—Å–æ–≤
HIGH_RISK_QUESTIONS = {
    "aggression": [
        {"id": "ag_full1", "text": "–ò–Ω–æ–≥–¥–∞ —è –Ω–µ –º–æ–≥—É —Å–¥–µ—Ä–∂–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ —É–¥–∞—Ä–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."},
        {"id": "ag_full2", "text": "–Ø –±—ã—Å—Ç—Ä–æ –≤—Å–ø—ã—Ö–∏–≤–∞—é, –Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –æ—Å—Ç—ã–≤–∞—é."},
        {"id": "ag_full3", "text": "–ë—ã–≤–∞–µ—Ç, —á—Ç–æ —è –ø—Ä–æ—Å—Ç–æ —Å—Ö–æ–∂—É —Å —É–º–∞ –æ—Ç —Ä–µ–≤–Ω–æ—Å—Ç–∏."},
        {"id": "ag_full4", "text": "–ï—Å–ª–∏ –º–µ–Ω—è —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å, —è –º–æ–≥—É —É–¥–∞—Ä–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."},
        {"id": "ag_full5", "text": "–Ø —Ä–∞–∑–¥—Ä–∞–∂–∞—é—Å—å, –∫–æ–≥–¥–∞ —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è."},
        {"id": "ag_full6", "text": "–í—Ä–µ–º–µ–Ω–∞–º–∏ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –∂–∏–∑–Ω—å –º–Ω–µ —á—Ç–æ-—Ç–æ –Ω–µ–¥–æ–¥–∞–ª–∞."},
        {"id": "ag_full7", "text": "–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–¥–∞—Ä–∏—Ç –º–µ–Ω—è, —è –¥–∞–º —Å–¥–∞—á–∏."},
        {"id": "ag_full8", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –≤–æ—Ç-–≤–æ—Ç –≤–∑–æ—Ä–≤—É—Å—å."},
        {"id": "ag_full9", "text": "–î—Ä—É–≥–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–µ–∑–µ—Ç."},
        {"id": "ag_full10", "text": "–Ø –¥–µ—Ä—É—Å—å —á–∞—à–µ, —á–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ."}
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    ],
    "isolation": [
        {"id": "is_full1", "text": "–Ø –Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤, –∑–∞–Ω–∏–º–∞—è—Å—å —Å—Ç–æ–ª—å–∫–∏–º–∏ –≤–µ—â–∞–º–∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É."},
        {"id": "is_full2", "text": "–ú–Ω–µ –Ω–µ —Å –∫–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å."},
        {"id": "is_full3", "text": "–î–ª—è –º–µ–Ω—è –Ω–µ–≤—ã–Ω–æ—Å–∏–º–æ –±—ã—Ç—å —Ç–∞¬≠–∫–∏–º –æ–¥–∏–Ω–æ–∫–∏–º."},
        {"id": "is_full4", "text": "–ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—â–µ–Ω–∏—è."},
        {"id": "is_full5", "text": "–Ø —á—É–≤—Å—Ç–≤—É—é, –±—É–¥—Ç–æ –Ω–∏–∫—Ç–æ –¥–µ–π¬≠—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç —Å–µ–±—è."},
        {"id": "is_full6", "text": "–Ø –∑–∞—Å—Ç–∞—é —Å–µ–±—è –≤ –æ–∂–∏–¥–∞–Ω–∏–∏, —á—Ç–æ –ª—é–¥–∏ –ø–æ–∑–≤–æ–Ω—è—Ç –∏–ª–∏ –Ω–∞–ø–∏—à—É—Ç –º–Ω–µ."},
        {"id": "is_full7", "text": "–ù–µ—Ç –Ω–∏–∫–æ–≥–æ, –∫ –∫–æ–º—É —è –º–æ–≥ –±—ã –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è."},
        {"id": "is_full8", "text": "–Ø —Å–µ–π—á–∞—Å –±–æ–ª—å—à–µ –Ω–∏ —Å –∫–µ–º –Ω–µ –±–ª–∏–∑–æ–∫."},
        {"id": "is_full9", "text": "–¢–µ, –∫—Ç–æ –º–µ–Ω—è –æ–∫—Ä—É–∂–∞–µ—Ç, –Ω–µ —Ä–∞–∑¬≠–¥–µ–ª—è—é—Ç –º–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ –∏–¥–µ–∏."},
        {"id": "is_full10", "text": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–∫–∏–Ω—É—Ç—ã–º."}
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    ],
    "somatic": [
        {"id": "som_full1", "text": "–û—â—É—â–µ–Ω–∏–µ –æ–Ω–µ–º–µ–Ω–∏—è –∏–ª–∏ –ø–æ–∫–∞–ª—ã–≤–∞–Ω–∏—è –≤ —Ç–µ–ª–µ"},
        {"id": "som_full2", "text": "–û—â—É—â–µ–Ω–∏–µ –∂–∞—Ä—ã"},
        {"id": "som_full3", "text": "–î—Ä–æ–∂—å –≤ –Ω–æ–≥–∞—Ö"},
        {"id": "som_full4", "text": "–ù–µ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è"},
        {"id": "som_full5", "text": "–°—Ç—Ä–∞—Ö, —á—Ç–æ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Å–∞–º–æ–µ –ø–ª–æ—Ö–æ–µ"},
        {"id": "som_full6", "text": "–ì–æ–ª–æ–≤–æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏–ª–∏ –æ—â—É—â–µ–Ω–∏–µ –ª–µ–≥–∫–æ—Å—Ç–∏ –≤ –≥–æ–ª–æ–≤–µ"},
        {"id": "som_full7", "text": "–£—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ"},
        {"id": "som_full8", "text": "–ù–µ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"},
        {"id": "som_full9", "text": "–û—â—É—â–µ–Ω–∏–µ —É–∂–∞—Å–∞"},
        {"id": "som_full10", "text": "–ù–µ—Ä–≤–æ–∑–Ω–æ—Å—Ç—å"}
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    ],
    "anxiety": [
        {"id": "anx_full1", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å, –º–Ω–µ –Ω–µ –ø–æ —Å–µ–±–µ"},
        {"id": "anx_full2", "text": "–¢–æ, —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏–ª–æ –º–Ω–µ –±–æ–ª—å—à–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –∏ —Å–µ–π—á–∞—Å –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è —Ç–∞–∫–æ–µ –∂–µ —á—É–≤—Å—Ç–≤–æ"},
        {"id": "anx_full3", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —Å—Ç—Ä–∞—Ö, –∫–∞–∂–µ—Ç—Å—è, –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ —É–∂–∞—Å–Ω–æ–µ –º–æ–∂–µ—Ç –≤–æ—Ç-–≤–æ—Ç —Å–ª—É—á–∏—Ç—å—Å—è"},
        {"id": "anx_full4", "text": "–Ø —Å–ø–æ—Å–æ–±–µ–Ω —Ä–∞—Å—Å–º–µ—è—Ç—å—Å—è –∏ —É–≤–∏–¥–µ—Ç—å –≤ —Ç–æ–º –∏–ª–∏ –∏–Ω–æ–º —Å–æ–±—ã—Ç–∏–∏ —Å–º–µ—à–Ω–æ–µ"},
        {"id": "anx_full5", "text": "–ë–µ—Å–ø–æ–∫–æ–π–Ω—ã–µ –º—ã—Å–ª–∏ –∫—Ä—É—Ç—è—Ç—Å—è —É –º–µ–Ω—è –≤ –≥–æ–ª–æ–≤–µ"},
        {"id": "anx_full6", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –±–æ–¥—Ä–æ—Å—Ç—å"},
        {"id": "anx_full7", "text": "–Ø –ª–µ–≥–∫–æ –º–æ–≥—É —Å–µ—Å—Ç—å –∏ —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è"},
        {"id": "anx_full8", "text": "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —è –≤—Å—ë —Å—Ç–∞–ª –¥–µ–ª–∞—Ç—å –æ—á–µ–Ω—å –º–µ–¥–ª–µ–Ω–Ω–æ"},
        {"id": "anx_full9", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä–æ–∂—å"},
        {"id": "anx_full10", "text": "–Ø –Ω–µ —Å–ª–µ–∂—É –∑–∞ —Å–≤–æ–µ–π –≤–Ω–µ—à–Ω–æ—Å—Ç—å—é"}
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    ],
    "stability": [
        {"id": "stab_full1", "text": "–ë—ã–≤–∞–ª–æ, —á—Ç–æ —è –±—Ä–æ—Å–∞–ª –Ω–∞—á–∞—Ç–æ–µ –¥–µ–ª–æ, —Ç–∞–∫ –∫–∞–∫ –±–æ—è–ª—Å—è, —á—Ç–æ –Ω–µ —Å–ø—Ä–∞–≤–ª—é—Å—å —Å –Ω–∏–º."},
        {"id": "stab_full2", "text": "–ú–µ–Ω—è –ª–µ–≥–∫–æ –ø–µ—Ä–µ—Å–ø–æ—Ä–∏—Ç—å."},
        {"id": "stab_full3", "text": "–Ø –∏–∑–±–µ–≥–∞—é –ø–æ–ø—Ä–∞–≤–ª—è—Ç—å –ª—é–¥–µ–π, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞—é—Ç –Ω–µ–æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."},
        {"id": "stab_full4", "text": "–õ—é–¥–∏ –ø—Ä–æ—è–≤–ª—è—é—Ç –∫–æ –º–Ω–µ —Å—Ç–æ–ª—å–∫–æ —Å–æ—á—É–≤—Å—Ç–≤–∏—è –∏ —Å–∏–º–ø–∞—Ç–∏–∏, —Å–∫–æ–ª—å–∫–æ —è –∑–∞—Å–ª—É–∂–∏–≤–∞—é."},
        {"id": "stab_full5", "text": "–ò–Ω–æ–≥–¥–∞ —è –±—ã–≤–∞—é, —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ –∑–Ω–∞—é—Ç, –æ —á–µ–º —è –¥—É–º–∞—é."},
        {"id": "stab_full6", "text": "–í—Ä–µ–º–µ–Ω–∞–º–∏ —è –±—ã–≤–∞—é —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–π –Ω–∏–∫—á–µ–º–Ω–æ—Å—Ç–∏."},
        {"id": "stab_full7", "text": "–Ø —á–∞—Å—Ç–æ –∑–∞–ø–æ–º–∏–Ω–∞—é —á–∏—Å–ª–∞, –Ω–µ –∏–º–µ—é—â–∏–µ –¥–ª—è –º–µ–Ω—è –Ω–∏–∫–∞–∫–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è."},
        {"id": "stab_full8", "text": "–Ø –≤–ø–µ—á–∞—Ç–ª–∏—Ç–µ–ª—å–Ω–µ–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π."},
        {"id": "stab_full9", "text": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Å—É–¥—å–±–∞ –Ω–µ –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞ –∫–æ –º–Ω–µ."},
        {"id": "stab_full10", "text": "–ú–Ω–µ —á–∞—Å—Ç–æ –≥–æ–≤–æ—Ä—è—Ç, —á—Ç–æ —è –≤—Å–ø—ã–ª—å—á–∏–≤."}
        # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ –ø–æ–ª–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    ]
}

# –ù–∞–∑–≤–∞–Ω–∏—è —à–∫–∞–ª
SCALE_NAMES = {
    "aggression": "–®–∫–∞–ª–∞ –∞–≥—Ä–µ—Å—Å–∏–∏ (–ë–∞—Å—Å–∞-–ü–µ—Ä—Ä–∏)",
    "isolation": "–®–∫–∞–ª–∞ –∏–∑–æ–ª—è—Ü–∏–∏/–¥–µ–ø—Ä–∏–≤–∞—Ü–∏–∏ (–î. –†–∞—Å—Å–µ–ª)",
    "somatic": "–®–∫–∞–ª–∞ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–µ–ø—Ä–µ—Å—Å–∏–∏ (–ë–µ–∫–∞)",
    "anxiety": "–®–∫–∞–ª–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ (NUDS)",
    "stability": "–®–∫–∞–ª–∞ –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏",
    "sincerity": "–®–∫–∞–ª–∞ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞ OpenAI
def set_openai_api_key(api_key):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á OpenAI –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    os.environ["OPENAI_API_KEY"] = api_key
    return True

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
def generate_speech(text, voice="alloy", language="ru"):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI TTS API
    
    Args:
        text (str): –¢–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        voice (str): –ì–æ–ª–æ—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (alloy, echo, fable, onyx, nova, shimmer)
        language (str): –ö–æ–¥ —è–∑—ã–∫–∞ –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è (en, ru, de, fr –∏ —Ç.–¥.)
    
    Returns:
        str: HTML –∫–æ–¥ –¥–ª—è –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–Ω–∏—è –∞—É–¥–∏–æ –≤ Streamlit
    """
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ API –∫–ª—é—á–∞
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            st.warning("API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
            return None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞
        client = openai.OpenAI(api_key=api_key)
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as temp_audio:
            temp_filename = temp_audio.name
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —è–∑—ã–∫–∞
        language_instructions = ""
        if language == "ru":
            language_instructions = "–ì–æ–≤–æ—Ä–∏—Ç–µ –ø–æ-—Ä—É—Å—Å–∫–∏ —Å —á–µ—Ç–∫–∏–º –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ–º."
        elif language == "en":
            language_instructions = "Speak in English with clear pronunciation."
        elif language == "de":
            language_instructions = "Sprechen Sie Deutsch mit klarer Aussprache."
        elif language == "fr":
            language_instructions = "Parlez en fran√ßais avec une prononciation claire."
        elif language == "es":
            language_instructions = "Hable en espa√±ol con pronunciaci√≥n clara."
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ
        response = client.audio.speech.create(
            model="gpt-4o-mini-tts",
            voice=voice,
            input=text,
            response_format="mp3",
            instructions=language_instructions
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        response.stream_to_file(temp_filename)
        
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ –∫–∞–∫ base64 –¥–ª—è –≤—Å—Ç—Ä–∞–∏–≤–∞–Ω–∏—è –≤ HTML
        with open(temp_filename, "rb") as audio_file:
            audio_bytes = audio_file.read()
        
        # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64
        audio_base64 = base64.b64encode(audio_bytes).decode()
        
        # –°–æ–∑–¥–∞–µ–º HTML –¥–ª—è audio player
        audio_html = f'<audio autoplay controls><source src="data:audio/mp3;base64,{audio_base64}" type="audio/mp3"></audio>'
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        os.unlink(temp_filename)
        
        return audio_html
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
def initialize_session():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    if 'stage' not in st.session_state:
        st.session_state.stage = 'start'
    if 'responses' not in st.session_state:
        st.session_state.responses = {}
    if 'current_scale' not in st.session_state:
        st.session_state.current_scale = None
    if 'current_question_index' not in st.session_state:
        st.session_state.current_question_index = 0
    if 'questions_order' not in st.session_state:
        st.session_state.questions_order = []
    if 'scale_scores' not in st.session_state:
        st.session_state.scale_scores = {}
    if 'risk_levels' not in st.session_state:
        st.session_state.risk_levels = {}
    if 'medium_risk_scales' not in st.session_state:
        st.session_state.medium_risk_scales = []
    if 'high_risk_scales' not in st.session_state:
        st.session_state.high_risk_scales = []
    if 'evaluated_scales' not in st.session_state:
        st.session_state.evaluated_scales = []
    if 'detailed_results' not in st.session_state:
        st.session_state.detailed_results = {}
    if 'user_info' not in st.session_state:
        st.session_state.user_info = {'name': '', 'age': '', 'gender': ''}
    if 'tts_enabled' not in st.session_state:
        st.session_state.tts_enabled = False
    if 'tts_voice' not in st.session_state:
        st.session_state.tts_voice = 'alloy'
    if 'last_question_id' not in st.session_state:
        st.session_state.last_question_id = None
    if 'tts_language' not in st.session_state:
        st.session_state.tts_language = 'ru'

def reset_session():
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    initialize_session()

def save_response(question_id, value):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å"""
    st.session_state.responses[question_id] = value

def prepare_screening_questions():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞"""
    questions = []
    for scale, scale_questions in SCREENING_QUESTIONS.items():
        for question in scale_questions:
            questions.append({
                "id": question["id"],
                "text": question["text"],
                "scale": scale
            })
    # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    np.random.shuffle(questions)
    st.session_state.questions_order = questions
    st.session_state.current_question_index = 0

def prepare_detailed_questions(scale, risk_level):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —à–∫–∞–ª—ã —Å –ø–æ–≤—ã—à–µ–Ω–Ω—ã–º —Ä–∏—Å–∫–æ–º"""
    if risk_level == "medium":
        questions = MEDIUM_RISK_QUESTIONS.get(scale, [])
    else:  # high risk
        questions = HIGH_RISK_QUESTIONS.get(scale, [])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∫–∞–ª–µ –∫ –∫–∞–∂–¥–æ–º—É –≤–æ–ø—Ä–æ—Å—É
    for question in questions:
        question['scale'] = scale
    
    st.session_state.questions_order = questions
    st.session_state.current_question_index = 0
    st.session_state.current_scale = scale

def calculate_scale_score(scale, responses):
    """–†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –ø–æ —à–∫–∞–ª–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–≤–µ—Ç–æ–≤"""
    score = 0
    count = 0
    
    # –£—á–∏—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π —à–∫–∞–ª—ã
    for question_id, value in responses.items():
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π —à–∫–∞–ª–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å
        scale_key = None
        for s, questions in SCREENING_QUESTIONS.items():
            if any(q['id'] == question_id for q in questions):
                scale_key = s
                break
        
        if not scale_key and scale != 'sincerity':
            for s, questions in MEDIUM_RISK_QUESTIONS.items():
                if any(q['id'] == question_id for q in questions):
                    scale_key = s
                    break
            
        if not scale_key and scale != 'sincerity':
            for s, questions in HIGH_RISK_QUESTIONS.items():
                if any(q['id'] == question_id for q in questions):
                    scale_key = s
                    break
        
        if scale_key == scale:
            score += value
            count += 1
    
    return score, count

def analyze_screening_results():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞"""
    scores = {}
    risk_levels = {}
    
    # –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π —à–∫–∞–ª–µ
    for scale in SCREENING_QUESTIONS.keys():
        score, count = calculate_scale_score(scale, st.session_state.responses)
        if count > 0:  # –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –¥–µ–ª–µ–Ω–∏–µ –Ω–∞ –Ω–æ–ª—å
            scores[scale] = score
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            if scale != 'sincerity':
                if THRESHOLDS["low"][0] <= score <= THRESHOLDS["low"][1]:
                    risk_levels[scale] = "low"
                elif THRESHOLDS["medium"][0] <= score <= THRESHOLDS["medium"][1]:
                    risk_levels[scale] = "medium"
                elif THRESHOLDS["high"][0] <= score <= THRESHOLDS["high"][1]:
                    risk_levels[scale] = "high"
            else:
                # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —à–∫–∞–ª—ã –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                if score >= 13:
                    risk_levels[scale] = "low_sincerity"
                elif score <= 4:
                    risk_levels[scale] = "low_sincerity"
                else:
                    risk_levels[scale] = "normal"
    
    st.session_state.scale_scores = scores
    st.session_state.risk_levels = risk_levels
    
    # –í—ã–¥–µ–ª–µ–Ω–∏–µ —à–∫–∞–ª —Å–æ —Å—Ä–µ–¥–Ω–∏–º –∏ –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
    medium_risk_scales = [s for s, level in risk_levels.items() if level == "medium" and s != 'sincerity']
    high_risk_scales = [s for s, level in risk_levels.items() if level == "high" and s != 'sincerity']
    
    st.session_state.medium_risk_scales = medium_risk_scales
    st.session_state.high_risk_scales = high_risk_scales
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if risk_levels.get('sincerity') == "low_sincerity":
        st.session_state.stage = 'sincerity_warning'
    elif high_risk_scales:
        st.session_state.stage = 'high_risk_assessment'
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —à–∫–∞–ª—É —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        st.session_state.current_scale = high_risk_scales[0]
        prepare_detailed_questions(high_risk_scales[0], "high")
    elif medium_risk_scales:
        st.session_state.stage = 'medium_risk_assessment'
        # –í—ã–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—É—é —à–∫–∞–ª—É —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        st.session_state.current_scale = medium_risk_scales[0]
        prepare_detailed_questions(medium_risk_scales[0], "medium")
    else:
        st.session_state.stage = 'results'
        prepare_report()

def analyze_detailed_results(scale, risk_level):
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    score, count = calculate_scale_score(scale, st.session_state.responses)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    max_possible = count * 5  # 5 - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
    percentage = (score / max_possible) * 100 if max_possible > 0 else 0
    
    result = {
        "score": score,
        "count": count,
        "percentage": percentage,
        "max_possible": max_possible
    }
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    st.session_state.detailed_results[scale] = result
    
    # –û—Ç–º–µ—á–∞–µ–º —à–∫–∞–ª—É –∫–∞–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—É—é
    if scale not in st.session_state.evaluated_scales:
        st.session_state.evaluated_scales.append(scale)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    if risk_level == "medium":
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–µ –¥–ª—è —ç—Ç–æ–π —à–∫–∞–ª—ã
        if percentage >= 60:  # –ü–æ—Ä–æ–≥ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–ª–Ω–æ–π –æ—Ü–µ–Ω–∫–µ —ç—Ç–æ–π —à–∫–∞–ª—ã
            prepare_detailed_questions(scale, "high")
            return
        
        # –£–¥–∞–ª—è–µ–º —à–∫–∞–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞ —à–∫–∞–ª —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º
        if scale in st.session_state.medium_risk_scales:
            st.session_state.medium_risk_scales.remove(scale)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —à–∫–∞–ª—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º
        if st.session_state.medium_risk_scales:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —à–∫–∞–ª–µ —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º
            next_scale = st.session_state.medium_risk_scales[0]
            st.session_state.current_scale = next_scale
            prepare_detailed_questions(next_scale, "medium")
        elif st.session_state.high_risk_scales:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –æ—Ü–µ–Ω–∫–µ —à–∫–∞–ª —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
            st.session_state.stage = 'high_risk_assessment'
            next_scale = st.session_state.high_risk_scales[0]
            st.session_state.current_scale = next_scale
            prepare_detailed_questions(next_scale, "high")
        else:
            # –í—Å–µ —à–∫–∞–ª—ã –æ—Ü–µ–Ω–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            st.session_state.stage = 'results'
            prepare_report()
    
    elif risk_level == "high":
        # –£–¥–∞–ª—è–µ–º —à–∫–∞–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞ —à–∫–∞–ª —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        if scale in st.session_state.high_risk_scales:
            st.session_state.high_risk_scales.remove(scale)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ —à–∫–∞–ª—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
        if st.session_state.high_risk_scales:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–π —à–∫–∞–ª–µ —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
            next_scale = st.session_state.high_risk_scales[0]
            st.session_state.current_scale = next_scale
            prepare_detailed_questions(next_scale, "high")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∫–∞–ª—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –æ—Ü–µ–Ω–µ–Ω—ã
            remaining_medium = [s for s in st.session_state.medium_risk_scales if s not in st.session_state.evaluated_scales]
            if remaining_medium:
                st.session_state.stage = 'medium_risk_assessment'
                next_scale = remaining_medium[0]
                st.session_state.current_scale = next_scale
                prepare_detailed_questions(next_scale, "medium")
            else:
                # –í—Å–µ —à–∫–∞–ª—ã –æ—Ü–µ–Ω–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                st.session_state.stage = 'results'
                prepare_report()

def prepare_report():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    # –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    recommendations = []
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –±–∞–ª–ª—ã –≤ —É—Ä–æ–≤–Ω–∏ —Ä–∏—Å–∫–∞ –¥–ª—è –æ—Ç—á–µ—Ç–∞
    risk_levels_desc = {}
    for scale, score in st.session_state.scale_scores.items():
        if scale == 'sincerity':
            continue
            
        if score <= THRESHOLDS["low"][1]:
            risk_levels_desc[scale] = "–Ω–∏–∑–∫–∏–π"
        elif score <= THRESHOLDS["medium"][1]:
            risk_levels_desc[scale] = "—Å—Ä–µ–¥–Ω–∏–π"
        else:
            risk_levels_desc[scale] = "–≤—ã—Å–æ–∫–∏–π"
    
    # –î–æ–ø–æ–ª–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    for scale, result in st.session_state.detailed_results.items():
        percentage = result["percentage"]
        if percentage < 33:
            intensity = "–Ω–∏–∑–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"
        elif percentage < 67:
            intensity = "—Å—Ä–µ–¥–Ω–µ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"
        else:
            intensity = "–≤—ã—Å–æ–∫–æ–π –∏–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç–∏"
        
        risk_levels_desc[scale] += f" ({intensity})"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
    if any(level == "–≤—ã—Å–æ–∫–∏–π" for level in risk_levels_desc.values()):
        recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–º –¥–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤.")
    
    if "–≤—ã—Å–æ–∫–∏–π" in risk_levels_desc.get("anxiety", ""):
        recommendations.append("–ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –æ—Å–≤–æ–µ–Ω–∏–µ —Ç–µ—Ö–Ω–∏–∫ —Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–æ–º –¥–ª—è —Å–Ω–∏–∂–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏.")
    
    if "–≤—ã—Å–æ–∫–∏–π" in risk_levels_desc.get("somatic", ""):
        recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞ –∏ —Ç—Ä–µ–≤–æ–≥–∏.")
    
    if "–≤—ã—Å–æ–∫–∏–π" in risk_levels_desc.get("stability", ""):
        recommendations.append("–ü–æ–ª–µ–∑–Ω–æ —Ä–∞–∑–≤–∏—Ç–∏–µ –Ω–∞–≤—ã–∫–æ–≤ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏–∏ –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏.")
    
    if "–≤—ã—Å–æ–∫–∏–π" in risk_levels_desc.get("aggression", ""):
        recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—É—á–µ–Ω–∏–µ –º–µ—Ç–æ–¥–∞–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≥–Ω–µ–≤–æ–º –∏ –∞–≥—Ä–µ—Å—Å–∏–µ–π.")
    
    if "–≤—ã—Å–æ–∫–∏–π" not in risk_levels_desc.get("isolation", ""):
        recommendations.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–º–µ—é—â–∏–µ—Å—è —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏ –∫–∞–∫ —Ä–µ—Å—É—Ä—Å –¥–ª—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏.")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—â–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    recommendations.append("–†–µ–≥—É–ª—è—Ä–Ω–∞—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ –∑–¥–æ—Ä–æ–≤—ã–π —Å–æ–Ω –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω–æ —É–ª—É—á—à–∞—é—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ —Å–µ—Å—Å–∏–∏
    st.session_state.recommendations = recommendations
    st.session_state.risk_levels_desc = risk_levels_desc

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

def show_start_screen():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
    st.title("–ê–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    st.markdown("""
    ## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    
    –î–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–∞ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —à–∫–∞–ª–∞–º:
    * –®–∫–∞–ª–∞ –∞–≥—Ä–µ—Å—Å–∏–∏ (–ë–∞—Å—Å–∞-–ü–µ—Ä—Ä–∏)
    * –®–∫–∞–ª–∞ –∏–∑–æ–ª—è—Ü–∏–∏/–¥–µ–ø—Ä–∏–≤–∞—Ü–∏–∏ (–î. –†–∞—Å—Å–µ–ª)
    * –®–∫–∞–ª–∞ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–µ–ø—Ä–µ—Å—Å–∏–∏ (–ë–µ–∫–∞)
    * –®–∫–∞–ª–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ (NUDS)
    * –®–∫–∞–ª–∞ –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏
    
    **–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:**
    * –°–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º —à–∫–∞–ª–∞–º, –≥–¥–µ –≤—ã—è–≤–ª–µ–Ω—ã –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
    * –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –±–æ–ª–µ–µ —Ç–æ—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –ø—Ä–∏ –º–µ–Ω—å—à–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –≤–æ–ø—Ä–æ—Å–æ–≤
    * –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–∫–ª—é—á–∞—é—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    
    **–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:**
    1. –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –∏—Å–∫—Ä–µ–Ω–Ω–µ
    2. –î–ª—è –∫–∞–∂–¥–æ–≥–æ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5, –≥–¥–µ:
       * 1 - –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω
       * 2 - –°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω
       * 3 - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
       * 4 - –°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω
       * 5 - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω
    3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–π–º–µ—Ç –æ—Ç 5 –¥–æ 15 –º–∏–Ω—É—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    """)
    
    # –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    with st.form("user_info_form"):
        st.subheader("–î–ª—è –Ω–∞—á–∞–ª–∞, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ")
        
        col1, col2 = st.columns(2)
        with col1:
            name = st.text_input("–ò–º—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)", value=st.session_state.user_info.get('name', ''))
        with col2:
            age = st.number_input("–í–æ–∑—Ä–∞—Å—Ç", min_value=15, max_value=100, step=1, value=int(st.session_state.user_info.get('age', 25)) if st.session_state.user_info.get('age') else 25)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª —Ç–æ–ª—å–∫–æ –∫–∞–∫ "–ú—É–∂—Å–∫–æ–π"
        gender = "–ú—É–∂—Å–∫–æ–π"
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")
        tts_enabled = st.checkbox("–í–∫–ª—é—á–∏—Ç—å –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤", value=st.session_state.tts_enabled)
        
        if tts_enabled:
            tts_voice = st.selectbox(
                "–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ–ª–æ—Å",
                ["alloy", "echo", "fable", "onyx", "nova", "shimmer"],
                index=["alloy", "echo", "fable", "onyx", "nova", "shimmer"].index(st.session_state.tts_voice) if st.session_state.tts_voice in ["alloy", "echo", "fable", "onyx", "nova", "shimmer"] else 0
            )
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
            tts_language = "ru"
        else:
            tts_voice = st.session_state.tts_voice
            tts_language = st.session_state.tts_language
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ API –∫–ª—é—á–∞ OpenAI –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
        api_key_expander = st.expander("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ (API –∫–ª—é—á OpenAI)")
        with api_key_expander:
            st.markdown("""
            –î–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è API –∫–ª—é—á OpenAI. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á API –Ω–∞ —Å–∞–π—Ç–µ 
            [OpenAI](https://platform.openai.com/api-keys).
            """)
            
            api_key = st.text_input(
                "API –∫–ª—é—á OpenAI",
                type="password",
                help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á OpenAI –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è"
            )
            
            if api_key:
                if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á"):
                    if set_openai_api_key(api_key):
                        st.success("API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω! –§—É–Ω–∫—Ü–∏—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞.")
                    else:
                        st.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å API –∫–ª—é—á.")
        
        submitted = st.form_submit_button("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        if submitted:
            st.session_state.user_info = {
                'name': name,
                'age': age,
                'gender': gender
            }
            st.session_state.tts_enabled = tts_enabled
            st.session_state.tts_voice = tts_voice
            st.session_state.tts_language = tts_language
            st.session_state.stage = 'screening'
            prepare_screening_questions()
            st.rerun()
    
    # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    with st.expander("–î–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"):
        if st.button("–°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ –∏ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            reset_session()
            st.rerun()
            
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ OpenAI API –∫–ª—é—á–∞
        st.subheader("–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤")
        st.markdown("""
        –î–ª—è —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á OpenAI. 
        –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á API –Ω–∞ —Å–∞–π—Ç–µ [OpenAI](https://platform.openai.com/api-keys) –∏ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –µ–≥–æ —Å–ª–µ–¥—É—é—â–∏–º –æ–±—Ä–∞–∑–æ–º:
        
        ```
        import os
        os.environ["OPENAI_API_KEY"] = "–≤–∞—à-–∫–ª—é—á-api"
        ```
        
        –ò–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è:
        ```
        # Windows
        set OPENAI_API_KEY=–≤–∞—à-–∫–ª—é—á-api
        
        # Linux/MacOS
        export OPENAI_API_KEY=–≤–∞—à-–∫–ª—é—á-api
        ```
        """)

def show_question(question, progress=None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å —à–∫–∞–ª–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
    st.subheader(f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question_index + 1} –∏–∑ {len(st.session_state.questions_order)}")
    
    if progress is not None:
        st.progress(progress)
    
    st.markdown(f"**{question['text']}**")
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –æ–Ω–æ –≤–∫–ª—é—á–µ–Ω–æ
    if st.session_state.tts_enabled:
        audio_container = st.empty()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∫–ª—é—á OpenAI API
        if os.environ.get("OPENAI_API_KEY"):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
            if 'last_question_id' not in st.session_state or st.session_state.last_question_id != question['id']:
                audio_html = generate_speech(question['text'], voice=st.session_state.tts_voice, language=st.session_state.tts_language)
                if audio_html:
                    audio_container.markdown(audio_html, unsafe_allow_html=True)
                    # –ó–∞–ø–æ–º–∏–Ω–∞–µ–º ID –≤–æ–ø—Ä–æ—Å–∞, —á—Ç–æ–±—ã –Ω–µ –æ–∑–≤—É—á–∏–≤–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ –ø—Ä–∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                    st.session_state.last_question_id = question['id']
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            if st.button("üîä –û–∑–≤—É—á–∏—Ç—å –µ—â–µ —Ä–∞–∑", key="tts_button"):
                audio_html = generate_speech(question['text'], voice=st.session_state.tts_voice, language=st.session_state.tts_language)
                if audio_html:
                    audio_container.markdown(audio_html, unsafe_allow_html=True)
        else:
            st.warning("–î–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á OpenAI.")
    
    # –°–æ–∑–¥–∞–µ–º —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç 1 –¥–æ 5
    cols = st.columns(5)
    selected_value = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —É–∂–µ –¥–∞–Ω –æ—Ç–≤–µ—Ç –Ω–∞ —ç—Ç–æ—Ç –≤–æ–ø—Ä–æ—Å
    default_index = None
    if question['id'] in st.session_state.responses:
        default_index = st.session_state.responses[question['id']] - 1
    
    for i, col in enumerate(cols):
        value = i + 1
        label = f"{value}"
        with col:
            if col.button(label, key=f"btn_{value}", help=f"{value} - {'–°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω' if value == 1 else '–°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω' if value == 2 else '–ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ' if value == 3 else '–°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω' if value == 4 else '–ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω'}"):
                selected_value = value
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if selected_value is not None:
        save_response(question['id'], selected_value)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
        if st.session_state.current_question_index < len(st.session_state.questions_order) - 1:
            st.session_state.current_question_index += 1
        else:
            # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ç–µ–∫—É—â–∏–π —ç—Ç–∞–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if st.session_state.stage == 'screening':
                analyze_screening_results()
            elif st.session_state.stage == 'medium_risk_assessment':
                analyze_detailed_results(st.session_state.current_scale, "medium")
            elif st.session_state.stage == 'high_risk_assessment':
                analyze_detailed_results(st.session_state.current_scale, "high")
        
        st.rerun()
    
    # –û–ø–∏—Å–∞–Ω–∏–µ —à–∫–∞–ª—ã
    st.markdown("""
    **–®–∫–∞–ª–∞ –æ—Ü–µ–Ω–∫–∏:**
    - **1** - –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω
    - **2** - –°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω
    - **3** - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ
    - **4** - –°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω
    - **5** - –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω
    """)

def show_screening():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞"""
    st.title("–ü–µ—Ä–≤–∏—á–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥")
    
    st.markdown("""
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.
    """)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = st.session_state.current_question_index / len(st.session_state.questions_order)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = st.session_state.questions_order[st.session_state.current_question_index]
    show_question(question, progress)

def show_sincerity_warning():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    st.title("–í–Ω–∏–º–∞–Ω–∏–µ: –í–æ–∑–º–æ–∂–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤")
    
    st.markdown("""
    ## –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ
    
    –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –≤–æ–∑–º–æ–∂–Ω—É—é –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –≤ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –ø—Ä–∏—á–∏–Ω–∞–º:
    
    * –í—ã –º–æ–≥–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å —Å–ª–∏—à–∫–æ–º –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω–æ
    * –í–æ–∑–º–æ–∂–Ω–æ, –≤—ã –Ω–µ –¥–æ –∫–æ–Ω—Ü–∞ –ø–æ–Ω—è–ª–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    * –í—ã –º–æ–≥–ª–∏ —Å—Ç—Ä–µ–º–∏—Ç—å—Å—è –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–º —Å–≤–µ—Ç–µ
    
    –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, –≤–∞–∂–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –ø—Ä–∏ –æ—Ç–≤–µ—Ç–∞—Ö.
    """)
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("–ü—Ä–æ–π—Ç–∏ —Å–∫—Ä–∏–Ω–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ"):
            reset_session()
            st.session_state.stage = 'screening'
            prepare_screening_questions()
            st.rerun()
    
    with col2:
        if st.button("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å –∏–º–µ—é—â–∏–º–∏—Å—è –æ—Ç–≤–µ—Ç–∞–º–∏"):
            # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑, –∏–≥–Ω–æ—Ä–∏—Ä—É—è –ø—Ä–æ–±–ª–µ–º—É —Å –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å—é
            st.session_state.risk_levels['sincerity'] = "warning_ignored"
            
            if st.session_state.high_risk_scales:
                st.session_state.stage = 'high_risk_assessment'
                st.session_state.current_scale = st.session_state.high_risk_scales[0]
                prepare_detailed_questions(st.session_state.high_risk_scales[0], "high")
            elif st.session_state.medium_risk_scales:
                st.session_state.stage = 'medium_risk_assessment'
                st.session_state.current_scale = st.session_state.medium_risk_scales[0]
                prepare_detailed_questions(st.session_state.medium_risk_scales[0], "medium")
            else:
                st.session_state.stage = 'results'
                prepare_report()
            
            st.rerun()

def show_detailed_assessment():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    current_scale = st.session_state.current_scale
    scale_name = SCALE_NAMES.get(current_scale, current_scale)
    risk_level = "—Å—Ä–µ–¥–Ω–∏–º" if st.session_state.stage == 'medium_risk_assessment' else "–≤—ã—Å–æ–∫–∏–º"
    
    st.title(f"–£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞: {scale_name}")
    
    st.markdown(f"""
    –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –≤—ã—è–≤–ª–µ–Ω {risk_level} —Ä–∏—Å–∫ –ø–æ —à–∫–∞–ª–µ "{scale_name}".
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.
    """)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = st.session_state.current_question_index / len(st.session_state.questions_order)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = st.session_state.questions_order[st.session_state.current_question_index]
    show_question(question, progress)

def show_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    st.title("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ –∏–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ —É–∫–∞–∑–∞–Ω–æ
    if st.session_state.user_info.get('name'):
        st.markdown(f"## –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {st.session_state.user_info['name']}!")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –±—ã–ª–æ
    if st.session_state.risk_levels.get('sincerity') == "warning_ignored":
        st.warning("‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–Ω–∏–∂–µ–Ω–Ω—É—é –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å.")
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    st.markdown("""
    ### –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω–æ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    
    –í—ã –ø—Ä–æ—à–ª–∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∫–ª—é—á–µ–≤—ã–º —à–∫–∞–ª–∞–º.
    
    –°–∏—Å—Ç–µ–º–∞ –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–ª–∞—Å—å –∫ –≤–∞—à–∏–º –æ—Ç–≤–µ—Ç–∞–º, –∑–∞–¥–∞–≤–∞—è —É–≥–ª—É–±–ª–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ç–µ–º —à–∫–∞–ª–∞–º, –≥–¥–µ –±—ã–ª–∏ –≤—ã—è–≤–ª–µ–Ω—ã –ø–æ–≤—ã—à–µ–Ω–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏.
    """)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ —à–∫–∞–ª–∞–º")
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    scales = []
    scores = []
    max_scores = []
    colors = []
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞
    for scale, score in st.session_state.scale_scores.items():
        if scale == 'sincerity':
            continue
        
        scales.append(SCALE_NAMES.get(scale, scale))
        scores.append(score)
        # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ - 15 –±–∞–ª–ª–æ–≤ (3 –≤–æ–ø—Ä–æ—Å–∞ * 5 –º–∞–∫—Å. –±–∞–ª–ª–æ–≤)
        max_scores.append(15)
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
        if score <= THRESHOLDS["low"][1]:
            colors.append('#4CAF50')  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞
        elif score <= THRESHOLDS["medium"][1]:
            colors.append('#FFC107')  # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
        else:
            colors.append('#F44336')  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
    
    # –î–∞–Ω–Ω—ã–µ –∏–∑ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    for scale, result in st.session_state.detailed_results.items():
        scale_name = f"{SCALE_NAMES.get(scale, scale)} (—É–≥–ª—É–±–ª.)"
        
        scales.append(scale_name)
        scores.append(result['score'])
        max_scores.append(result['max_possible'])
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
        percentage = result['percentage']
        if percentage < 33:
            colors.append('#4CAF50')  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞
        elif percentage < 67:
            colors.append('#FFC107')  # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
        else:
            colors.append('#F44336')  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
    
    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
    df = pd.DataFrame({
        '–®–∫–∞–ª–∞': scales,
        '–ë–∞–ª–ª': scores,
        '–ú–∞–∫—Å–∏–º—É–º': max_scores,
        '–¶–≤–µ—Ç': colors
    })
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
    df['–ü—Ä–æ—Ü–µ–Ω—Ç'] = (df['–ë–∞–ª–ª'] / df['–ú–∞–∫—Å–∏–º—É–º']) * 100
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
    fig, ax = plt.subplots(figsize=(10, 6))
    bars = ax.barh(df['–®–∫–∞–ª–∞'], df['–ü—Ä–æ—Ü–µ–Ω—Ç'], color=df['–¶–≤–µ—Ç'])
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –∑–Ω–∞—á–µ–Ω–∏–π
    for i, bar in enumerate(bars):
        width = bar.get_width()
        label_x_pos = width + 1
        ax.text(label_x_pos, bar.get_y() + bar.get_height()/2, f'{df["–ë–∞–ª–ª"].iloc[i]}/{df["–ú–∞–∫—Å–∏–º—É–º"].iloc[i]} ({width:.1f}%)',
                va='center')
    
    ax.set_xlabel('–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è')
    ax.set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è')
    ax.set_xlim(0, 105)  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥–µ–ª –ø–æ –æ—Å–∏ X –¥–ª—è —Ä–∞–∑–º–µ—â–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
    ax.axvline(x=33, color='gray', linestyle='--', alpha=0.5)
    ax.axvline(x=67, color='gray', linestyle='--', alpha=0.5)
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
    ax.text(16.5, -0.5, '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫', color='gray', ha='center')
    ax.text(50, -0.5, '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫', color='gray', ha='center')
    ax.text(83.5, -0.5, '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫', color='gray', ha='center')
    
    st.pyplot(fig)
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("–ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    for scale, level in st.session_state.risk_levels_desc.items():
        scale_name = SCALE_NAMES.get(scale, scale)
        
        if "–≤—ã—Å–æ–∫–∏–π" in level:
            emoji = "üî¥"
        elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
            emoji = "üü°"
        else:
            emoji = "üü¢"
        
        st.markdown(f"**{emoji} {scale_name}**: –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ - {level}")
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–ø–∏—Å–∞–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π —à–∫–∞–ª—ã
        if scale == "aggression":
            if "–≤—ã—Å–æ–∫–∏–π" in level:
                st.markdown("–í—ã—è–≤–ª–µ–Ω –ø–æ–≤—ã—à–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π. –í–æ–∑–º–æ–∂–Ω—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º –≥–Ω–µ–≤–∞ –∏ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö –∏–º–ø—É–ª—å—Å–æ–≤.")
            elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                st.markdown("–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã—Ö —Ç–µ–Ω–¥–µ–Ω—Ü–∏–π. –í —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –º–æ–∂–µ—Ç –ø—Ä–æ—è–≤–ª—è—Ç—å—Å—è –ø–æ–≤—ã—à–µ–Ω–Ω–∞—è —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.")
            else:
                st.markdown("–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ç–µ–Ω–¥–µ–Ω—Ü–∏–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã. –•–æ—Ä–æ—à–∏–π –∫–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–¥ —ç–º–æ—Ü–∏—è–º–∏ –≥–Ω–µ–≤–∞.")
        
        elif scale == "isolation":
            if "–≤—ã—Å–æ–∫–∏–π" in level:
                st.markdown("–í—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞ –∏ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∏–∑–æ–ª—è—Ü–∏–∏. –í–æ–∑–º–æ–∂–Ω—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π.")
            elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                st.markdown("–£–º–µ—Ä–µ–Ω–Ω–æ–µ —á—É–≤—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—â—É—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞ –æ–±—â–µ–Ω–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏—è —Å–æ —Å—Ç–æ—Ä–æ–Ω—ã –æ–∫—Ä—É–∂–∞—é—â–∏—Ö.")
            else:
                st.markdown("–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–≤—è–∑–µ–π. –ß—É–≤—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞ –Ω–µ –≤—ã—Ä–∞–∂–µ–Ω–æ.")
        
        elif scale == "somatic":
            if "–≤—ã—Å–æ–∫–∏–π" in level:
                st.markdown("–í—ã—Ä–∞–∂–µ–Ω–Ω—ã–µ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Ç—Ä–µ–≤–æ–≥–∏ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏. –í–æ–∑–º–æ–∂–Ω—ã –∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ –¥–∏—Å–∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–µ –æ—â—É—â–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º.")
            elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                st.markdown("–£–º–µ—Ä–µ–Ω–Ω—ã–µ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤–æ–∑–Ω–∏–∫–∞—é—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ç—Ä–µ–≤–æ–≥–æ–π –∏–ª–∏ —Å—Ç—Ä–µ—Å—Å–æ–º.")
            else:
                st.markdown("–ù–µ–∑–Ω–∞—á–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è. –•–æ—Ä–æ—à–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Ñ–∏–∑–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è–º —Å—Ç—Ä–µ—Å—Å–∞.")
        
        elif scale == "anxiety":
            if "–≤—ã—Å–æ–∫–∏–π" in level:
                st.markdown("–í—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏. –ü—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–µ –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ, –≤–æ–∑–º–æ–∂–Ω—ã –ø–∞–Ω–∏—á–µ—Å–∫–∏–µ —ç–ø–∏–∑–æ–¥—ã.")
            elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                st.markdown("–£–º–µ—Ä–µ–Ω–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏. –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –±–µ—Å–ø–æ–∫–æ–π—Å—Ç–≤–æ –∏ —Ç—Ä–µ–≤–æ–∂–Ω—ã–µ –º—ã—Å–ª–∏, –æ—Å–æ–±–µ–Ω–Ω–æ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.")
            else:
                st.markdown("–ù–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏. –•–æ—Ä–æ—à–∞—è —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.")
        
        elif scale == "stability":
            if "–≤—ã—Å–æ–∫–∏–π" in level:
                st.markdown("–°–Ω–∏–∂–µ–Ω–Ω–∞—è –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å. –í–æ–∑–º–æ–∂–Ω—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –∫ —Å—Ç—Ä–µ—Å—Å—É, —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –Ω–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å.")
            elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                st.markdown("–£–º–µ—Ä–µ–Ω–Ω–∞—è –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å. –í —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö –º–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–∞—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å —Å–∞–º–æ—Ä–µ–≥—É–ª—è—Ü–∏–µ–π.")
            else:
                st.markdown("–•–æ—Ä–æ—à–∞—è –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å. –°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∞–¥–µ–∫–≤–∞—Ç–Ω–æ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã.")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    st.subheader("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏")
    
    for i, recommendation in enumerate(st.session_state.recommendations):
        st.markdown(f"{i+1}. {recommendation}")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    st.warning("""
    **–í–∞–∂–Ω–æ**: –î–∞–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –∑–∞–º–µ–Ω—è–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞. 
    –ï—Å–ª–∏ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ—è—Ç –∫–∞–∫–∏–µ-–ª–∏–±–æ –∞—Å–ø–µ–∫—Ç—ã –≤–∞—à–µ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è, 
    —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω–æ–º—É –ø—Å–∏—Ö–æ–ª–æ–≥—É –∏–ª–∏ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–µ–≤—Ç—É.
    """)
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã (PDF)"):
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–¥ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è PDF
        st.success("–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.")
    
    # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if st.button("–ü—Ä–æ–π—Ç–∏ –Ω–æ–≤–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ"):
        reset_session()
        st.rerun()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    initialize_session()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    if st.session_state.stage == 'start':
        show_start_screen()
    elif st.session_state.stage == 'screening':
        show_screening()
    elif st.session_state.stage == 'sincerity_warning':
        show_sincerity_warning()
    elif st.session_state.stage == 'medium_risk_assessment' or st.session_state.stage == 'high_risk_assessment':
        show_detailed_assessment()
    elif st.session_state.stage == 'results':
        show_results()
    else:
        st.error("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        if st.button("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            reset_session()
            st.rerun()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()