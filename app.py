import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from datetime import datetime, date
import json
import os
import base64
import tempfile

# –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ OpenAI –¥–ª—è –∞—É–¥–∏–æ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞)
try:
    import openai
    AUDIO_AVAILABLE = True
except ImportError:
    AUDIO_AVAILABLE = False
    st.sidebar.warning("üîä OpenAI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ê—É–¥–∏–æ —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="–°–∏—Å—Ç–µ–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö",
    page_icon="ü™ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏ –∫–æ–Ω—Å—Ç–∞–Ω—Ç
THRESHOLDS = {
    "low": (3, 7),
    "medium": (8, 11),
    "high": (12, 15)
}

# –°–∫—Ä–∏–Ω–∏–Ω–≥–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (–ø–µ—Ä–≤–∏—á–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
SCREENING_QUESTIONS = {
    "aggression": [
        {"id": "ag1", "text": "–Ø —Ä–∞–∑–¥—Ä–∞–∂–∞—é—Å—å, –∫–æ–≥–¥–∞ —É –º–µ–Ω—è —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è."},
        {"id": "ag2", "text": "–ò–Ω–æ–≥–¥–∞, –∫–æ–≥–¥–∞ —è –Ω–µ–≤–∞–∂–Ω–æ —Å–µ–±—è —á—É–≤—Å—Ç–≤—É—é, —è –±—ã–≤–∞—é —Ä–∞–∑–¥—Ä–∞–∂–∏—Ç–µ–ª—å–Ω—ã–º."},
        {"id": "ag3", "text": "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –º–æ–∏ –¥—Ä—É–∑—å—è —Å—á–∏—Ç–∞—é—Ç, —á—Ç–æ —è –≤—Å–ø—ã–ª—å—á–∏–≤."}
    ],
    "isolation": [
        {"id": "is1", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ –∑–∞–≤–æ–¥–∏—Ç—å –¥—Ä—É–∑–µ–π."},
        {"id": "is2", "text": "–ú–Ω–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –æ–±—â–µ–Ω–∏—è."},
        {"id": "is3", "text": "–ú–Ω–µ –Ω–µ —Å –∫–µ–º –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å."}
    ],
    "somatic": [
        {"id": "som1", "text": "–ò–Ω–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–≤–∞–µ—Ç —É—Å–∫–æ—Ä–µ–Ω–Ω–æ–µ —Å–µ—Ä–¥—Ü–µ–±–∏–µ–Ω–∏–µ"},
        {"id": "som2", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —è –Ω–µ –º–æ–≥—É –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–∏ –º—ã—Å–ª–∏"},
        {"id": "som3", "text": "–ò–Ω–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–≤–∞—é—Ç –∂–µ–ª—É–¥–æ—á–Ω–æ-–∫–∏—à–µ—á–Ω—ã–µ —Ä–∞—Å—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ "}
    ],
    "anxiety": [
        {"id": "anx1", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ—Å—Ç—å, –º–Ω–µ –Ω–µ –ø–æ —Å–µ–±–µ"},
        {"id": "anx2", "text": "–ü—Ä–∏—Å—Ç—É–ø—ã –ø–ª–æ—Ö–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è —É –º–µ–Ω—è –±—ã–≤–∞—é—Ç —Ä–µ–¥–∫–æ."},
        {"id": "anx3", "text": "–ò–Ω–æ–≥–¥–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –±–µ–∑–æ –≤—Å—è–∫–æ–π –ø—Ä–∏—á–∏–Ω—ã —É –º–µ–Ω—è –≤–¥—Ä—É–≥ –Ω–∞—Å—Ç—É–ø–∞–µ—Ç –ø–µ—Ä–∏–æ–¥ –Ω–µ–æ–±—ã—á–∞–π–Ω–æ–π –≤–µ—Å–µ–ª–æ—Å—Ç–∏."}
    ],
    "stability": [
        {"id": "stab1", "text": "–Ø –º–æ–≥—É –ø–æ–ª—É—á–∏—Ç—å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ –æ—Ç —Ö–æ—Ä–æ—à–µ–π –∫–Ω–∏–≥–∏, —Ä–∞–¥–∏–æ- –∏–ª–∏ —Ç–µ–ª–µ–ø—Ä–æ–≥—Ä–∞–º–º—ã "},
        {"id": "stab2", "text": "–ë—ã–≤–∞–ª–æ, —á—Ç–æ –ø—Ä–∏ –æ–±—Å—É–∂–¥–µ–Ω–∏–∏ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —è, –æ—Å–æ–±–µ–Ω–Ω–æ –Ω–µ –∑–∞–¥—É–º—ã–≤–∞—è—Å—å, —Å–æ–≥–ª–∞—à–∞–ª—Å—è —Å –º–Ω–µ–Ω–∏–µ–º –¥—Ä—É–≥–∏—Ö."},
        {"id": "stab3", "text": "–£ –º–µ–Ω—è —á–∞—Å—Ç–æ –±—ã–≤–∞—é—Ç –ø–æ–¥—ä–µ–º—ã –∏ —Å–ø–∞–¥—ã –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è."}
    ],
    "military_adaptation": [
        {"id": "mil1", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Ä–∏–∫–∞–∑—ã –±–µ–∑ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø—Ä–∏—á–∏–Ω."},
        {"id": "mil2", "text": "–Ø –±–æ—é—Å—å —Ñ–∏–∑–∏—á–µ—Å–∫–∏—Ö –Ω–∞–≥—Ä—É–∑–æ–∫ –∏ –∏—Å–ø—ã—Ç–∞–Ω–∏–π."},
        {"id": "mil3", "text": "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –¥–∞–ª–µ–∫–æ –æ—Ç –¥–æ–º–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è."}
    ],
    "sincerity": [
        {"id": "sin1", "text": "–ë—ã–≤–∞–ª–æ, —á—Ç–æ —è –≥–æ–≤–æ—Ä–∏–ª –æ –≤–µ—â–∞—Ö, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ —Ä–∞–∑–±–∏—Ä–∞—é—Å—å."},
        {"id": "sin2", "text": "–ë—ã–≤–∞–µ—Ç, —á—Ç–æ —è —Å–µ—Ä–∂—É—Å—å."},
        {"id": "sin3", "text": "–ò–Ω–æ–≥–¥–∞ —è –≥–æ–≤–æ—Ä—é –Ω–µ–ø—Ä–∞–≤–¥—É."}
    ]
}

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —à–∫–∞–ª —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º
MEDIUM_RISK_QUESTIONS = {
    "aggression": [
        {"id": "ag_med1", "text": "–Ø –¥–µ—Ä—É—Å—å —á–∞—â–µ, —á–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ."},
        {"id": "ag_med2", "text": "–ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ —É–¥–∞—Ä–∏—Ç –º–µ–Ω—è, —è –¥–∞–º —Å–¥–∞—á–∏."},
        {"id": "ag_med3", "text": "–ò–Ω–æ–≥–¥–∞ —è –≤—ã—Ö–æ–∂—É –∏–∑ —Å–µ–±—è –±–µ–∑ –æ—Å–æ–±–æ–π –ø—Ä–∏—á–∏–Ω—ã."},
        {"id": "ag_med4", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ —Å–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ."},
        {"id": "ag_med5", "text": "–ò–Ω–æ–≥–¥–∞ —è –Ω–∞—Å—Ç–æ–ª—å–∫–æ –≤—ã—Ö–æ–¥–∏–ª –∏–∑ —Å–µ–±—è, —á—Ç–æ –ª–æ–º–∞–ª –≤–µ—â–∏."}
    ],
    "isolation": [
        {"id": "is_med1", "text": "–°—á–∞—Å—Ç–ª–∏–≤–µ–π –≤—Å–µ–≥–æ —è –±—ã–≤–∞—é, –∫–æ–≥–¥–∞ —è –æ–¥–∏–Ω."},
        {"id": "is_med2", "text": "–ï—Å–ª–∏ –±—ã –ª—é–¥–∏ –Ω–µ –±—ã–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–æ—Ç–∏–≤ –º–µ–Ω—è, —è –¥–æ—Å—Ç–∏–≥ –±—ã –≤ –∂–∏–∑–Ω–∏ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ–≥–æ."},
        {"id": "is_med3", "text": "–ò–Ω–æ–≥–¥–∞ —è –±—ã–≤–∞—é, —É–≤–µ—Ä–µ–Ω, —á—Ç–æ –¥—Ä—É–≥–∏–µ –ª—é–¥–∏ –∑–Ω–∞—é—Ç, –æ —á–µ–º —è –¥—É–º–∞—é."},
        {"id": "is_med4", "text": "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∏–º–µ–Ω–Ω–æ –∫–æ –º–Ω–µ –æ—Å–æ–±–µ–Ω–Ω–æ —á–∞—Å—Ç–æ –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ."},
        {"id": "is_med5", "text": "–ß–∞—Å—Ç–æ, –¥–∞–∂–µ –∫–æ–≥–¥–∞ –≤—Å–µ —Å–∫–ª–∞–¥—ã–≤–∞–µ—Ç—Å—è –¥–ª—è –º–µ–Ω—è —Ö–æ—Ä–æ—à–æ, —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –º–Ω–µ –≤—Å–µ –±–µ–∑—Ä–∞–∑–ª–∏—á–Ω–æ."},
        {"id": "is_med6", "text": "–ú–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ —è –≤—Å–µ —á—É–≤—Å—Ç–≤—É—é –±–æ–ª–µ–µ –æ—Å—Ç—Ä–æ, —á–µ–º –¥—Ä—É–≥–∏–µ."}
    
    ],
    "somatic": [
        {"id": "som_med1", "text": "–ë—ã–≤–∞–ª–æ, —á—Ç–æ —è —Ü–µ–ª—ã–º–∏ –¥–Ω—è–º–∏ –∏–ª–∏ –¥–∞–∂–µ –Ω–µ–¥–µ–ª—è–º–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –º–æ–≥ –¥–µ–ª–∞—Ç—å, –ø–æ—Ç–æ–º—É —á—Ç–æ –Ω–∏–∫–∞–∫ –Ω–µ –º–æ–≥ –∑–∞—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –≤–∑—è—Ç—å—Å—è –∑–∞ —Ä–∞–±–æ—Ç—É."},
        {"id": "som_med2", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —É –º–µ–Ω—è —É–¥—É—à—å–µ"},
        {"id": "som_med3", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —É –º–µ–Ω—è –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ"},
        {"id": "som_med4", "text": "–ö–æ–≥–¥–∞ —è –ø—ã—Ç–∞—é—Å—å —á—Ç–æ-—Ç–æ —Å–¥–µ–ª–∞—Ç—å, —Ç–æ —á–∞—Å—Ç–æ –∑–∞–º–µ—á–∞—é, —á—Ç–æ —É –º–µ–Ω—è –¥—Ä–æ–∂–∞—Ç —Ä—É–∫–∏."},
        {"id": "som_med5", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é –ò—Å–ø—É–≥"},
        {"id": "som_med6", "text": "–ë–µ—Å–ø–æ–∫–æ–π–Ω—ã–µ –º—ã—Å–ª–∏ –∫—Ä—É—Ç—è—Ç—Å—è —É –º–µ–Ω—è –≤ –≥–æ–ª–æ–≤–µ"}
    ],
    "anxiety": [
        {"id": "anx_med1", "text": "—É –º–µ–Ω—è –±—ã–≤–∞–µ—Ç –≤–Ω–µ–∑–∞–ø–Ω–æ–µ —á—É—Å—Ç–≤–æ –ø–∞–Ω–∏–∫–∏"},
        {"id": "anx_med2", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏–ª–∏ –¥—Ä–æ–∂—å"},
        {"id": "anx_med3", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é –Ω–µ—É—Å–∏–¥—á–∏–≤–æ—Å—Ç—å, —Å–ª–æ–≤–Ω–æ –º–Ω–µ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –Ω—É–∂–Ω–æ –¥–≤–∏–≥–∞—Ç—å—Å—è"},
        {"id": "anx_med4", "text": "–¢–æ, —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏–ª–æ –º–Ω–µ –±–æ–ª—å—à–æ–µ —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ, –∏ —Å–µ–π—á–∞—Å –≤—ã–∑—ã–≤–∞–µ—Ç —É –º–µ–Ω—è —Ç–∞–∫–æ–µ –∂–µ —á—É–≤—Å—Ç–≤–æ"},
        {"id": "anx_med5", "text": "–†–∞–±–æ—Ç–∞, —Ç—Ä–µ–±—É—é—â–∞—è –ø—Ä–∏—Å—Ç–∞–ª—å–Ω–æ–≥–æ –≤–Ω–∏–º–∞–Ω–∏—è, –º–Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è."}
    ],
    "stability": [
        {"id": "stab_med1", "text": "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ —Å—É–¥—å–±–∞ –Ω–µ –±–ª–∞–≥–æ—Å–∫–ª–æ–Ω–Ω–∞ –∫–æ –º–Ω–µ."},
        {"id": "stab_med2", "text": "–Ø –ª–µ–≥–∫–æ —Ç–µ—Ä—è—é —Ç–µ—Ä–ø–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏."},
        {"id": "stab_med3", "text": "–õ—é–¥–∏ –ø—Ä–æ—è–≤–ª—è—é—Ç –∫–æ –º–Ω–µ —Å—Ç–æ–ª—å–∫–æ —Å–æ—á—É–≤—Å—Ç–≤–∏—è –∏ —Å–∏–º–ø–∞—Ç–∏–∏, —Å–∫–æ–ª—å–∫–æ —è –∑–∞—Å–ª—É–∂–∏–≤–∞—é."},
        {"id": "stab_med4", "text": "–ò–Ω–æ–≥–¥–∞ –º–Ω–µ –≤ –≥–æ–ª–æ–≤—É –ø—Ä–∏—Ö–æ–¥—è—Ç —Ç–∞–∫–∏–µ –Ω–µ—Ö–æ—Ä–æ—à–∏–µ –º—ã—Å–ª–∏, —á—Ç–æ –ª—É—á—à–µ –æ –Ω–∏—Ö –Ω–∏–∫–æ–º—É –Ω–µ —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å."},
        {"id": "stab_med5", "text": "–î–æ–ª–∂–µ–Ω –ø—Ä–∏–∑–Ω–∞—Ç—å, —á—Ç–æ –≤—Ä–µ–º–µ–Ω–∞–º–∏ —è –≤–æ–ª–Ω—É—é—Å—å –∏–∑-–∑–∞ –ø—É—Å—Ç—è–∫–æ–≤."},
        {"id": "stab_med6", "text": "–Ø —á–∞—Å—Ç–æ –ø—Ä–µ–¥–∞—é—Å—å –≥—Ä—É—Å—Ç–Ω—ã–º —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è–º."},
        {"id": "stab_med7", "text": "–Ø —á–µ–ª–æ–≤–µ–∫ –Ω–µ—Ä–≤–Ω—ã–π –∏ –ª–µ–≥–∫–æ–≤–æ–∑–±—É–¥–∏–º—ã–π.."}
    ],
    "military_adaptation": [
        {"id": "mil_med1", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö."},
        {"id": "mil_med2", "text": "–Ø –ø–ª–æ—Ö–æ –ø–µ—Ä–µ–Ω–æ—à—É –∫—Ä–∏—Ç–∏–∫—É –æ—Ç —Å—Ç–∞—Ä—à–∏—Ö."},
        {"id": "mil_med3", "text": "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ."},
        {"id": "mil_med4", "text": "–Ø –∏–∑–±–µ–≥–∞—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π."},
        {"id": "mil_med5", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Å—Ç—Ä–æ–≥–∏–π —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è."}
    ]
}

# –ü–æ–ª–Ω—ã–µ –æ–ø—Ä–æ—Å–Ω–∏–∫–∏ –¥–ª—è —à–∫–∞–ª —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
HIGH_RISK_QUESTIONS = {
    "aggression": [
        {"id": "ag_full1", "text": "–ò–Ω–æ–≥–¥–∞ —è –Ω–µ –º–æ–≥—É —Å–¥–µ—Ä–∂–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ —É–¥–∞—Ä–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."},
        {"id": "ag_full2", "text": "–Ø –±—ã—Å—Ç—Ä–æ –≤—Å–ø—ã—Ö–∏–≤–∞—é, –Ω–æ –∏ –±—ã—Å—Ç—Ä–æ –æ—Å—Ç—ã–≤–∞—é."},
        {"id": "ag_full3", "text": "–ë—ã–≤–∞–µ—Ç, —á—Ç–æ —è –ø—Ä–æ—Å—Ç–æ —Å—Ö–æ–∂—É —Å —É–º–∞ –æ—Ç —Ä–µ–≤–Ω–æ—Å—Ç–∏."},
        {"id": "ag_full4", "text": "–ï—Å–ª–∏ –º–µ–Ω—è —Å–ø—Ä–æ–≤–æ—Ü–∏—Ä–æ–≤–∞—Ç—å, —è –º–æ–≥—É —É–¥–∞—Ä–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."},
        {"id": "ag_full5", "text": "–ò–Ω–æ–≥–¥–∞ —è –Ω–µ –º–æ–≥—É —Å–¥–µ—Ä–∂–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ —É–¥–∞—Ä–∏—Ç—å –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞."},
        {"id": "ag_full6", "text": "–í—Ä–µ–º–µ–Ω–∞–º–∏ –º–Ω–µ –∫–∞–∂–µ—Ç—Å—è, —á—Ç–æ –∂–∏–∑–Ω—å –º–Ω–µ —á—Ç–æ-—Ç–æ –Ω–µ–¥–æ–¥–∞–ª–∞."},
        {"id": "ag_full7", "text": "–Ø –ª–µ–≥–∫–æ —Ç–µ—Ä—è—é —Ç–µ—Ä–ø–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏."},
        {"id": "ag_full8", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –≤–æ—Ç-–≤–æ—Ç –≤–∑–æ—Ä–≤—É—Å—å."},
        {"id": "ag_full9", "text": "–î—Ä—É–≥–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω–æ –≤–µ–∑–µ—Ç."},
        {"id": "ag_full10", "text": "–Ø –¥–µ—Ä—É—Å—å —á–∞—â–µ, —á–µ–º –æ–∫—Ä—É–∂–∞—é—â–∏–µ."}
    ],
    "isolation": [
        {"id": "is_high1", "text": "–Ø –Ω–µ—Å—á–∞—Å—Ç–ª–∏–≤, –∑–∞–Ω–∏–º–∞—è—Å—å —Å—Ç–æ–ª—å–∫–∏–º–∏ –≤–µ—â–∞–º–∏ –≤ –æ–¥–∏–Ω–æ—á–∫—É."},
        {"id": "is_high2", "text": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –∏–∑–æ–ª–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –æ—Ç –¥—Ä—É–≥–∏—Ö."},
        {"id": "is_high3", "text": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è –ø–æ–∫–∏–Ω—É—Ç—ã–º."},
        {"id": "is_high4", "text": "–Ø –≤–ø–µ—á–∞—Ç–ª–∏—Ç–µ–ª—å–Ω–µ–µ –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π."},
        {"id": "is_high5", "text": "—è –Ω–µ—Å—á–∞—Å—Ç–µ–Ω –±—É–¥—É—á–∏ —Ç–∞–∫–∏–º –æ—Ç–≤–µ—Ä–∂–µ–Ω–Ω—ã–º."},
        {"id": "is_high6", "text": "–Ø —á—É–≤—Å—Ç–≤—É—é —Å–µ–±—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –æ–¥–∏–Ω–æ–∫–∏–º."}
     ],
    "somatic": [
        {"id": "som_high1", "text": "–ì–æ–ª–æ–≤–∞ —É –º–µ–Ω—è –±–æ–ª–∏—Ç —á–∞—Å—Ç–æ."},
        {"id": "som_high2", "text": "–ò–Ω–æ–≥–¥–∞ –º–æ–π —Å–ª—É—Ö –Ω–∞—Å—Ç–æ–ª—å–∫–æ –æ–±–æ—Å—Ç—Ä—è–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ –º–Ω–µ –¥–∞–∂–µ –º–µ—à–∞–µ—Ç."},
        {"id": "som_high3", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ —É –º–µ–Ω—è –∑–∞—Ç—Ä—É–¥–Ω–µ–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ"},
        {"id": "som_high4", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é —Å—Ç—Ä–∞—Ö —Å–º–µ—Ä—Ç–∏"},
        {"id": "som_high5", "text": "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é –∏–ª–∏ —á–∞—â–µ —è –±—ã–≤–∞—é –≤–æ–∑–±—É–∂–¥–µ–Ω–Ω—ã–º –∏ –≤–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω—ã–º."},
        {"id": "som_high6", "text": "–ò–Ω–æ–≥–¥–∞ —è –ø—Ä–∏–Ω–∏–º–∞—é –≤–∞–ª–µ—Ä–∏–∞–Ω—É, —ç–ª–µ–Ω–∏—É–º –∏–ª–∏ –¥—Ä—É–≥–∏–µ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ —Å—Ä–µ–¥—Å—Ç–≤–∞."}
    ],
    "anxiety": [
        {"id": "anx_high1", "text": "–Ø –∏—Å–ø—ã—Ç—ã–≤–∞—é —Å—Ç—Ä–∞—Ö, –∫–∞–∂–µ—Ç—Å—è, –±—É–¥—Ç–æ —á—Ç–æ-—Ç–æ —É–∂–∞—Å–Ω–æ–µ –º–æ–∂–µ—Ç –≤–æ—Ç-–≤–æ—Ç —Å–ª—É—á–∏—Ç—å—Å—è"},
        {"id": "anx_high2", "text": "–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –≤–µ—â–∏ –Ω–∞—Å—Ç–æ–ª—å–∫–æ –º–µ–Ω—è –≤–æ–ª–Ω—É—é—Ç, —á—Ç–æ –º–Ω–µ –¥–∞–∂–µ –≥–æ–≤–æ—Ä–∏—Ç—å –æ –Ω–∏—Ö —Ç—Ä—É–¥–Ω–æ."},
        {"id": "anx_high3", "text": "–ò–Ω–æ–≥–¥–∞ –º–µ–Ω—è –ø–æ–¥–≤–æ–¥—è—Ç –Ω–µ—Ä–≤—ã"},
        {"id": "anx_high4", "text": "–î—É–º–∞—é, —á—Ç–æ —è —á–µ–ª–æ–≤–µ–∫ –æ–±—Ä–µ—á–µ–Ω–Ω—ã–π."},
        {"id": "anx_high5", "text": "–í—Ä–µ–º–µ–Ω–∞–º–∏ —è –±—ã–≤–∞—é —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ —É–≤–µ—Ä–µ–Ω –≤ —Å–≤–æ–µ–π –Ω–∏–∫—á–µ–º–Ω–æ—Å—Ç–∏."}
    ],
    "stability": [
        {"id": "stab_high1", "text": "–¢–µ–ø–µ—Ä—å –º–Ω–µ —Ç—Ä—É–¥–Ω–æ –Ω–∞–¥–µ—è—Ç—å—Å—è –Ω–∞ —Ç–æ, —á—Ç–æ —è —á–µ–≥–æ-–Ω–∏–±—É–¥—å –¥–æ–±—å—é—Å—å –≤ –∂–∏–∑–Ω–∏."},
        {"id": "stab_high2", "text": "–Ø –ª–µ–≥–∫–æ —Ç–µ—Ä—è—é —Ç–µ—Ä–ø–µ–Ω–∏–µ —Å –ª—é–¥—å–º–∏."},
        {"id": "stab_high3", "text": "–£ –º–µ–Ω—è –±—ã–≤–∞–ª–∏ –ø–µ—Ä–∏–æ–¥—ã, –∫–æ–≥–¥–∞ —è —á—Ç–æ-—Ç–æ –¥–µ–ª–∞–ª, –∞ –ø–æ—Ç–æ–º –Ω–µ –∑–Ω–∞–ª, —á—Ç–æ –∏–º–µ–Ω–Ω–æ —è –¥–µ–ª–∞–ª."},
        {"id": "stab_high4", "text": "–ò–Ω–æ–≥–¥–∞ —É –º–µ–Ω—è –±—ã–≤–∞–µ—Ç —á—É–≤—Å—Ç–≤–æ, —á—Ç–æ –ø–µ—Ä–µ–¥–æ –º–Ω–æ–π –Ω–∞–≥—Ä–æ–º–æ–∑–¥–∏–ª–æ—Å—å —Å—Ç–æ–ª—å–∫–æ —Ç—Ä—É–¥–Ω–æ—Å—Ç–µ–π, —á—Ç–æ –æ–¥–æ–ª–µ—Ç—å –∏—Ö –ø—Ä–æ—Å—Ç–æ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ."},
        {"id": "stab_high5", "text": "–ï—Å–ª–∏ –≤ –º–æ–∏—Ö –Ω–µ—É–¥–∞—á–∞—Ö –∫—Ç–æ-—Ç–æ –≤–∏–Ω–æ–≤–∞—Ç, —è –Ω–µ –æ—Å—Ç–∞–≤–ª—è—é –µ–≥–æ –±–µ–∑–Ω–∞–∫–∞–∑–∞–Ω–Ω—ã–º."},
        {"id": "stab_high6", "text": "–ú–Ω–µ –æ—á–µ–Ω—å —Ç—Ä—É–¥–Ω–æ –ø—Ä–∏—Å–ø–æ—Å–æ–±–∏—Ç—å—Å—è –∫ –Ω–æ–≤—ã–º —É—Å–ª–æ–≤–∏—è–º –∂–∏–∑–Ω–∏, —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —É—á–µ–±—ã. –ü–µ—Ä–µ—Ö–æ–¥ –∫ –Ω–æ–≤—ã–º —É—Å–ª–æ–≤–∏—è–º –∂–∏–∑–Ω–∏, —Ä–∞–±–æ—Ç—ã –∏–ª–∏ —É—á–µ–±—ã –∫–∞–∂–µ—Ç—Å—è –º–Ω–µ –Ω–µ–≤—ã–Ω–æ—Å–∏–º–æ —Ç—Ä—É–¥–Ω—ã–º."},
        {"id": "stab_high7", "text": "–ò–Ω–æ–≥–¥–∞ —è —á—É–≤—Å—Ç–≤—É—é, —á—Ç–æ –±–ª–∏–∑–æ–∫ –∫ –Ω–µ—Ä–≤–Ω–æ–º—É —Å—Ä—ã–≤—É."}
    ],
    "military_adaptation": [
        {"id": "mil_high1", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö."},
        {"id": "mil_high2", "text": "–Ø –ø–ª–æ—Ö–æ –ø–µ—Ä–µ–Ω–æ—à—É –∫—Ä–∏—Ç–∏–∫—É –æ—Ç —Å—Ç–∞—Ä—à–∏—Ö."},
        {"id": "mil_high3", "text": "–ú–Ω–µ —Å–ª–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ."},
        {"id": "mil_high4", "text": "–Ø –∏–∑–±–µ–≥–∞—é –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π."},
        {"id": "mil_high5", "text": "–ú–Ω–µ —Ç—Ä—É–¥–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Å—Ç—Ä–æ–≥–∏–π —Ä–∞—Å–ø–æ—Ä—è–¥–æ–∫ –¥–Ω—è."}
    ]
}
   

# –ù–∞–∑–≤–∞–Ω–∏—è —à–∫–∞–ª
SCALE_NAMES = {
    "aggression": "–®–∫–∞–ª–∞ –∞–≥—Ä–µ—Å—Å–∏–∏ (–ë–∞—Å—Å–∞-–ü–µ—Ä—Ä–∏)",
    "isolation": "–®–∫–∞–ª–∞ –∏–∑–æ–ª—è—Ü–∏–∏/–¥–µ–ø—Ä–∏–≤–∞—Ü–∏–∏ (–î. –†–∞—Å—Å–µ–ª)",
    "somatic": "–®–∫–∞–ª–∞ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–µ–ø—Ä–µ—Å—Å–∏–∏ (–ë–µ–∫–∞)",
    "anxiety": "–®–∫–∞–ª–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏ (NUDS)",
    "stability": "–®–∫–∞–ª–∞ –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏",
    "military_adaptation": "–®–∫–∞–ª–∞ –≤–æ–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏",
    "sincerity": "–®–∫–∞–ª–∞ –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏"
}

# –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞ –¥–ª—è –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö
MILITARY_QUESTIONNAIRE = {
    "personal_info": {
        "title": "üë§ –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "questions": [
            {"id": "full_name", "text": "–§–ò–û", "type": "text", "required": True},
            {"id": "birth_date", "text": "–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è", "type": "date", "required": True},
            {"id": "birth_place", "text": "–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è", "type": "text", "required": True},
            {"id": "residence", "text": "–ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞", "type": "text", "required": True},   
            {"id": "residence_coliving", "text": "–° –∫–µ–º –≤ –Ω–∞—Å—Ç–æ—è—â–µ–µ –≤—Ä–µ–º—è –ø—Ä–æ–∂–∏–≤–∞–µ—Ç–µ –∏ –≤ —Ç–µ—á–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", "type": "text", "required": True},
            {"id": "team_senior", "text": "–°—Ç–∞—Ä—à–∏–π –∫–æ–º–∞–Ω–¥—ã", "type": "text", "required": False},
            {"id": "nationality", "text": "–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "type": "text", "required": True},
            {"id": "marital_status", "text": "–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ", "type": "select", "options": ["–•–æ–ª–æ—Å—Ç", "–ñ–µ–Ω–∞—Ç", "–†–∞–∑–≤–µ–¥–µ–Ω"], "required": True},
            {"id": "education", "text": "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "type": "select", "options": ["–°—Ä–µ–¥–Ω–µ–µ", "–°—Ä–µ–¥–Ω–µ–µ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ", "–í—ã—Å—à–µ–µ", "–ù–µ–ø–æ–ª–Ω–æ–µ –≤—ã—Å—à–µ–µ"], "required": True},
            {"id": "social_media", "text": "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–∏ –∞–∫–∫–∞—É–Ω—Ç—ã –≤ —Å–æ—Ü —Å–µ—Ç—è—Ö", "type": "textarea", "required": False}
        ]
    },
    "achievements_family": {
        "title": "üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ —Å–µ–º—å—è",
        "questions": [
            {"id": "sports_achievements", "text": "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è? –ö–∞–∫–∏–µ?", "type": "textarea", "required": False},
            {"id": "family_completeness", "text": "–í—ã –≤–æ—Å–ø–∏—Ç—ã–≤–∞–ª–∏—Å—å –≤ –ø–æ–ª–Ω–æ–π/–Ω–µ–ø–æ–ª–Ω–æ–π —Å–µ–º—å–µ", "type": "select", "options": ["–ü–æ–ª–Ω–æ–π", "–ù–µ–ø–æ–ª–Ω–æ–π"], "required": True},
            {"id": "deceased_relatives", "text": "–ï—Å—Ç—å –ª–∏ —É–º–µ—Ä—à–∏–µ —Å—Ä–µ–¥–∏ –±–ª–∏–∑–∫–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤? (–∫—Ç–æ, –≥–æ–¥ —Å–º–µ—Ä—Ç–∏, –ø—Ä–∏—á–∏–Ω–∞)", "type": "textarea", "required": False}
        ]
    },
    "family_info": {
        "title": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–µ–º—å–µ",
        "questions": [
            {"id": "father_info", "text": "–§–ò–û –æ—Ç—Ü–∞, –≤–æ–∑—Ä–∞—Å—Ç, –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã", "type": "textarea", "required": False},
            {"id": "father_relationship", "text": "–í–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –æ—Ç—Ü–æ–º", "type": "select", "options": ["–û—Ç–ª–∏—á–Ω—ã–µ", "–•–æ—Ä–æ—à–∏–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", "–ü–ª–æ—Ö–∏–µ", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"], "required": False},
            {"id": "mother_info", "text": "–§–ò–û –º–∞—Ç–µ—Ä–∏, –≤–æ–∑—Ä–∞—Å—Ç, –º–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã", "type": "textarea", "required": False},
            {"id": "mother_relationship", "text": "–í–∑–∞–∏–º–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å –º–∞—Ç–µ—Ä—å—é", "type": "select", "options": ["–û—Ç–ª–∏—á–Ω—ã–µ", "–•–æ—Ä–æ—à–∏–µ", "–£–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω—ã–µ", "–ü–ª–æ—Ö–∏–µ", "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"], "required": False},
            {"id": "siblings", "text": "–ë—Ä–∞—Ç—å—è –∏ —Å–µ—Å—Ç—Ä—ã (–§–ò–û, –≤–æ–∑—Ä–∞—Å—Ç)", "type": "textarea", "required": False},
            {"id": "home_escapes", "text": "–ë—ã–≤–∞–ª–∏ –ª–∏ —É –≤–∞—Å —Å–ª—É—á–∞–∏ –ø–æ–±–µ–≥–æ–≤ –∏–∑ –¥–æ–º–∞?", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True}
        ]
    },
    "social_connections": {
        "title": "üåê –°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏",
        "questions": [
            {"id": "astana_contacts", "text": "–ï—Å—Ç—å –ª–∏ –≤ –≥–æ—Ä–æ–¥–µ –ê—Å—Ç–∞–Ω–∞ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–∏ –∏–ª–∏ –∑–Ω–∞–∫–æ–º—ã–µ (–§–ò–û –∏ –∞–¥—Ä–µ—Å)", "type": "textarea", "required": False},
            {"id": "family_suicides", "text": "–ë—ã–ª–∏ –ª–∏ —Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–∞ –∏–ª–∏ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏ —É —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "personal_suicides", "text": "–ò–º–µ–ª–∏—Å—å –ª–∏ —É –≤–∞—Å –≤ –ø—Ä–æ—à–ª–æ–º —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏/–º—ã—Å–ª–∏", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True}
        ]
    },
    "health_history": {
        "title": "üè• –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∞—è –∏—Å—Ç–æ—Ä–∏—è",
        "questions": [
            {"id": "family_alcoholism", "text": "–ë—ã–ª –ª–∏ –≤ –≤–∞—à–µ–π —Å–µ–º—å–µ –∞–ª–∫–æ–≥–æ–ª–∏–∑–º", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "family_drugs", "text": "–ë—ã–ª–∞ –ª–∏ –≤ –≤–∞—à–µ–π —Å–µ–º—å–µ –Ω–∞—Ä–∫–æ–º–∞–Ω–∏—è", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "family_criminal", "text": "–ë—ã–ª–∞ –ª–∏ –≤ –≤–∞—à–µ–π —Å–µ–º—å–µ —Å—É–¥–∏–º–æ—Å—Ç—å", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "family_mental", "text": "–ë—ã–ª–∏ –ª–∏ –≤ —Å–µ–º—å–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "personal_alcoholism", "text": "–ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å –¥–æ –∞—Ä–º–∏–∏ —Ñ–∞–∫—Ç—ã –∞–ª–∫–æ–≥–æ–ª–∏–∑–º–∞", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "personal_drugs", "text": "–ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å –¥–æ –∞—Ä–º–∏–∏ —Ñ–∞–∫—Ç—ã –Ω–∞—Ä–∫–æ–º–∞–Ω–∏–∏", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "personal_criminal", "text": "–ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å –¥–æ –∞—Ä–º–∏–∏ —Å—É–¥–∏–º–æ—Å—Ç–∏", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "personal_mental", "text": "–ë—ã–ª–∏ –ª–∏ —É –≤–∞—Å –¥–æ –∞—Ä–º–∏–∏ –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
	        {"id": "personal_headtrauma", "text": "–ë—ã–ª–∏ –ª–∏ —É –í–∞—Å —Å–æ—Ç—Ä—è—Å–µ–Ω–∏—è –º–æ–∑–≥–∞/—Ç—Ä–∞–≤–º—ã –≥–æ–ª–æ–≤—ã", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "personal_gambling", "text": "–ë—ã–ª–∞ –ª–∏ —É –≤–∞—Å –∏–≥—Ä–æ–º–∞–Ω–∏—è", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "hereditary_diseases", "text": "–ò–º–µ–µ—à—å –ª–∏ —Ç—ã —Ç—è–∂—ë–ª—ã–µ –Ω–∞—Å–ª–µ–¥—Å—Ç–≤–µ–Ω–Ω—ã–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è? (–æ–Ω–∫–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ, –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã–µ, –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è, —Å–µ—Ä–¥–µ—á–Ω—ã–µ –∏ —Ç.–¥.)", "type": "textarea", "required": False},
            {"id": "seizures", "text": "–ë—ã–ª–∏ –ª–∏ —É –±–ª–∏–∂–∞–π—à–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏–ª–∏ —É –≤–∞—Å —Å—É–¥–æ—Ä–æ–∂–Ω—ã–µ –ø—Ä–∏–ø–∞–¥–∫–∏", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "bedwetting", "text": "–ë—ã–ª–æ –ª–∏ —É –≤–∞—Å –Ω–æ—á–Ω–æ–µ –Ω–µ–¥–µ—Ä–∂–∞–Ω–∏–µ –º–æ—á–∏?", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "bedwetting_age", "text": "–í –∫–∞–∫–æ–º –≤–æ–∑—Ä–∞—Å—Ç–µ? (–µ—Å–ª–∏ –±—ã–ª–æ –Ω–µ–¥–µ—Ä–∂–∞–Ω–∏–µ)", "type": "number", "required": False}
        ]
    },
    "work_military": {
        "title": "üíº –†–∞–±–æ—Ç–∞ –∏ –≤–æ–µ–Ω–Ω–∞—è —Å–ª—É–∂–±–∞",
        "questions": [
            {"id": "work_before_army", "text": "–ö–µ–º —Ä–∞–±–æ—Ç–∞–ª –¥–æ –∞—Ä–º–∏–∏, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏?", "type": "textarea", "required": False},
            {"id": "want_serve", "text": "–ñ–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –≤–æ–µ–Ω–Ω—É—é —Å–ª—É–∂–±—É", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "serve_reason", "text": "–ü—Ä–∏—á–∏–Ω–∞ (–µ—Å–ª–∏ –Ω–µ –∂–µ–ª–∞–µ—Ç–µ —Å–ª—É–∂–∏—Ç—å)", "type": "textarea", "required": False},
            {"id": "service_difficulties", "text": "–í —á–µ–º –¥–ª—è –≤–∞—Å –±—É–¥–µ—Ç —Ç—Ä—É–¥–Ω–æ—Å—Ç—å –≤–æ–∏–Ω—Å–∫–æ–π —Å–ª—É–∂–±—ã", "type": "multiselect", "options": ["–ë–µ—Å–ø—Ä–µ–∫–æ—Å–ª–æ–≤–Ω–æ–µ –ø–æ–¥—á–∏–Ω–µ–Ω–∏–µ", "–§–∏–∑–∏—á–µ—Å–∫–∏–µ –Ω–∞–≥—Ä—É–∑–∫–∏", "–£–¥–∞–ª–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç –¥–æ–º–∞", "–í—ã—Å–æ–∫–∞—è –ª–∏—á–Ω–∞—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å", "–ü—Ä–µ–æ–¥–æ–ª–µ–Ω–∏–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã—Ö –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–∏–≤—ã—á–µ–∫", "–î—Ä—É–≥–æ–µ"], "required": True}
        ]
    },
    "religion_lifestyle": {
        "title": "üïå –†–µ–ª–∏–≥–∏—è –∏ –æ–±—Ä–∞–∑ –∂–∏–∑–Ω–∏",
        "questions": [
            {"id": "religion_type", "text": "–ö–∞–∫—É—é —Ä–µ–ª–∏–≥–∏—é –∏—Å–ø–æ–≤–µ–¥—É–µ—à—å", "type": "text", "required": False},
            {"id": "religion_direction", "text": "–ö–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–ª–∏–≥–∏–∏", "type": "text", "required": False},
            {"id": "religion_teachers", "text": "–ï—Å–ª–∏ —Ç—ã —Å–ª—É—à–∞–µ—à—å –¥—É—Ö–æ–≤–Ω—ã—Ö —É—á–∏—Ç–µ–ª–µ–π, —Ç–æ –ø–µ—Ä–µ—á–∏—Å–ª–∏ –∏—Ö", "type": "text", "required": False},
            {"id": "religious_attendance", "text": "–ö–∞–∫ —á–∞—Å—Ç–æ —Ö–æ–¥–∏—à—å –≤ –º–µ—á–µ—Ç—å/—Ü–µ—Ä–∫–æ–≤—å", "type": "select", "options": ["–ö–∞–∂–¥—ã–π –¥–µ–Ω—å", "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", "–†–∞–∑ –≤ –Ω–µ–¥–µ–ª—é", "–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –º–µ—Å—è—Ü", "–†–µ–¥–∫–æ", "–ù–∏–∫–æ–≥–¥–∞"], "required": False},
            {"id": "traditional_holidays", "text": "–ü—Ä–∞–∑–¥–Ω—É–µ—Ç–µ –ª–∏ –≤—ã —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏?", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "social_events", "text": "–•–æ–¥–∏—Ç–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–æ—Ä–∂–µ—Å—Ç–≤–∞ (–¥–Ω–∏ —Ä–æ–∂–¥–µ–Ω–∏—è, —Å–≤–∞–¥—å–±—ã)", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "girlfriend", "text": "–ï—Å—Ç—å –ª–∏ –¥–µ–≤—É—à–∫–∞?", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "relationship_closeness", "text": "–ù–∞—Å–∫–æ–ª—å–∫–æ –±–ª–∏–∑–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5", "type": "slider", "min": 1, "max": 5, "required": False},
            {"id": "relationship_period", "text": "–°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö", "type": "text", "required": False}
        ]
    },
    "financial_health": {
        "title": "üí∞ –§–∏–Ω–∞–Ω—Å—ã –∏ –∑–¥–æ—Ä–æ–≤—å–µ",
        "questions": [
            {"id": "betting", "text": "–î–µ–ª–∞–µ—à—å –ª–∏ —Å—Ç–∞–≤–∫–∏ –≤ –±—É–∫–º–µ–∫–µ—Ä—Å–∫–∏—Ö –∫–æ–Ω—Ç–æ—Ä–∞—Ö –∏–ª–∏ –æ–Ω–ª–∞–π–Ω", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "credits", "text": "–ï—Å—Ç—å —É —Ç–µ–±—è –∫—Ä–µ–¥–∏—Ç—ã/–∑–∞–π–º—ã (—Å–∫–æ–ª—å–∫–æ, –Ω–∞ –∫–∞–∫—É—é —Å—É–º–º—É, –∫—Ç–æ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç)", "type": "textarea", "required": False},
            {"id": "medical_examination", "text": "–ü—Ä–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–∏ –í–í–ö –≤ –î–î–û –ø–æ–ª–Ω–æ—Å—Ç—å—é –ª–∏ –≤—ã –ø—Ä–æ—à–ª–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É –≤—Ä–∞—á–µ–π", "type": "radio", "options": ["–î–∞", "–ù–µ—Ç"], "required": True},
            {"id": "hidden_health_facts", "text": "–ï—Å—Ç—å –ª–∏ —Ñ–∞–∫—Ç—ã –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–∞—à–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è (–¥–∏–∞–≥–Ω–æ–∑—ã –ø–æ –∫–æ—Ç–æ—Ä—ã–º —Ä–∞–Ω–µ–µ –≤–∞—Å –Ω–µ –±—Ä–∞–ª–∏ –Ω–∞ —Å–ª—É–∂–±—É), –æ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –Ω–µ —Å–∫–∞–∑–∞–ª–∏ –≤–∞—à–µ–º—É —Å—Ç–∞—Ä—à–µ–º—É", "type": "textarea", "required": False}
        ]
    }
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ API –∫–ª—é—á–∞ OpenAI
def set_openai_api_key(api_key):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç API –∫–ª—é—á OpenAI –∫–∞–∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    if AUDIO_AVAILABLE:
        os.environ["OPENAI_API_KEY"] = api_key
        return True
    return False

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI API
def generate_speech(text, voice="alloy", language="ru"):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ –¥–ª—è –∑–∞–¥–∞–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º OpenAI TTS API"""
    if not AUDIO_AVAILABLE:
        return None
        
    try:
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            return None
        
        client = openai.OpenAI(api_key=api_key)
        
        with tempfile.NamedTemporaryFile(delete=False, suffix=".mp3") as temp_audio:
            temp_filename = temp_audio.name
        
        response = client.audio.speech.create(
            model="tts-1",
            voice=voice,
            input=text,
            response_format="mp3"
        )
        
        response.stream_to_file(temp_filename)
        
        with open(temp_filename, "rb") as audio_file:
            audio_bytes = audio_file.read()
        
        audio_base64 = base64.b64encode(audio_bytes).decode()
        audio_html = f'<audio autoplay controls><source src="data:audio/mp3;base64,{audio_base64}" type="audio/mp3"></audio>'
        
        os.unlink(temp_filename)
        return audio_html
    
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {str(e)}")
        return None

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º —Å–µ—Å—Å–∏–∏
def initialize_session():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ"""
    defaults = {
        'stage': 'start',
        'questionnaire_stage': 'personal_info',
        'questionnaire_responses': {},
        'responses': {},
        'current_scale': None,
        'current_question_index': 0,
        'questions_order': [],
        'scale_scores': {},
        'risk_levels': {},
        'medium_risk_scales': [],
        'high_risk_scales': [],
        'evaluated_scales': [],
        'detailed_results': {},
        'user_info': {'name': '', 'age': '', 'gender': ''},
        'session_id': datetime.now().strftime("%Y%m%d_%H%M%S"),
        'tts_enabled': False,
        'tts_voice': 'alloy',
        'tts_language': 'ru',
        'last_question_id': None,
        'questionnaire_completed': False,
        'risk_levels_desc': {}
    }
    
    for key, value in defaults.items():
        if key not in st.session_state:
            st.session_state[key] = value

def reset_session():
    """–°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    for key in list(st.session_state.keys()):
        del st.session_state[key]
    initialize_session()

def save_questionnaire_response(question_id, value):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –∞–Ω–∫–µ—Ç—ã"""
    st.session_state.questionnaire_responses[question_id] = value

def save_response(question_id, value):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    st.session_state.responses[question_id] = value

def show_start_screen():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —ç–∫—Ä–∞–Ω–∞"""
    st.title("ü™ñ –°–∏—Å—Ç–µ–º–∞ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–∏—Ö")
    
    st.markdown("""
    ## –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ
    
    –î–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –≤–∫–ª—é—á–∞–µ—Ç:
    
    ### üìã **–≠—Ç–∞–ø 1: –í–æ–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞**
    - –°–±–æ—Ä –ª–∏—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
    - –°–µ–º–µ–π–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
    - –í–æ–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    
    ### üß† **–≠—Ç–∞–ø 2: –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ**
    üéØ **–®–∫–∞–ª–∞ –∞–≥—Ä–µ—Å—Å–∏–∏** (–ë–∞—Å—Å–∞-–ü–µ—Ä—Ä–∏)  
    ü§ù **–®–∫–∞–ª–∞ –∏–∑–æ–ª—è—Ü–∏–∏/–¥–µ–ø—Ä–∏–≤–∞—Ü–∏–∏** (–î. –†–∞—Å—Å–µ–ª)  
    üíä **–®–∫–∞–ª–∞ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –¥–µ–ø—Ä–µ—Å—Å–∏–∏** (–ë–µ–∫–∞)  
    üò∞ **–®–∫–∞–ª–∞ —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç–∏ –∏ –¥–µ–ø—Ä–µ—Å—Å–∏–∏** (NUDS)  
    üßò **–®–∫–∞–ª–∞ –Ω–µ—Ä–≤–Ω–æ-–ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏**  
    ü™ñ **–®–∫–∞–ª–∞ –≤–æ–µ–Ω–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏** (—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è)
    """)
    
    # –ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞
    col1, col2, col3 = st.columns([1, 2, 1])
    with col2:
        if st.button("üöÄ –ù–∞—á–∞—Ç—å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", use_container_width=True, type="primary"):
            st.session_state.stage = 'questionnaire'
            st.rerun()

def show_questionnaire():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–µ–Ω–Ω–æ–π –∞–Ω–∫–µ—Ç—ã"""
    st.title("ü™ñ –í–æ–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞")
    
    st.info("""
    üìã **–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É –ø–µ—Ä–µ–¥ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—á–∞–π—Ç–µ —á–µ—Å—Ç–Ω–æ –∏ –ø–æ–ª–Ω–æ. –í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–∞ –∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ.
    
    üî¥ - –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    """)
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å–µ–∫—Ü–∏—è–º
    sections = list(MILITARY_QUESTIONNAIRE.keys())
    section_names = [MILITARY_QUESTIONNAIRE[s]["title"] for s in sections]
    
    current_section_index = sections.index(st.session_state.questionnaire_stage)
    
    # –¢–∞–±—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    selected_tab = st.selectbox(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        section_names,
        index=current_section_index
    )
    
    selected_section = sections[section_names.index(selected_tab)]
    st.session_state.questionnaire_stage = selected_section
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å–µ–∫—Ü–∏–∏
    section_data = MILITARY_QUESTIONNAIRE[selected_section]
    section_complete = show_questionnaire_section(selected_section, section_data)
    
    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
    completed_sections = 0
    total_sections = len(sections)
    
    for section_key in sections:
        section_questions = MILITARY_QUESTIONNAIRE[section_key]["questions"]
        section_filled = True
        for q in section_questions:
            if q.get("required", False):
                if not st.session_state.questionnaire_responses.get(q["id"]):
                    section_filled = False
                    break
        if section_filled:
            completed_sections += 1
    
    progress = completed_sections / total_sections
    st.progress(progress)
    st.write(f"–ü—Ä–æ–≥—Ä–µ—Å—Å: {completed_sections}/{total_sections} —Ä–∞–∑–¥–µ–ª–æ–≤ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if current_section_index > 0:
            if st.button("‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ä–∞–∑–¥–µ–ª"):
                st.session_state.questionnaire_stage = sections[current_section_index - 1]
                st.rerun()
    
    with col2:
        if current_section_index < len(sections) - 1:
            if st.button("‚û°Ô∏è –°–ª–µ–¥—É—é—â–∏–π —Ä–∞–∑–¥–µ–ª"):
                st.session_state.questionnaire_stage = sections[current_section_index + 1]
                st.rerun()
    
    with col3:
        if progress == 1.0:
            if st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É –∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"):
                st.session_state.questionnaire_completed = True
                st.session_state.stage = 'screening'
                prepare_screening_questions()
                st.rerun()
        else:
            st.button("‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∞–Ω–∫–µ—Ç—É", disabled=True)
            st.caption("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

def show_questionnaire_section(section_name, section_data):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∞–Ω–∫–µ—Ç—ã"""
    st.subheader(section_data["title"])
    
    all_filled = True
    
    for question in section_data["questions"]:
        question_id = question["id"]
        question_text = question["text"]
        question_type = question["type"]
        required = question.get("required", False)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        saved_value = st.session_state.questionnaire_responses.get(question_id)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
        if question_type == "text":
            value = st.text_input(
                f"{'üî¥ ' if required else ''}{question_text}",
                value=saved_value or "",
                key=f"q_{question_id}",
                placeholder="–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç..."
            )
            if value != saved_value:
                save_questionnaire_response(question_id, value)
            if required and not value:
                all_filled = False
                
        elif question_type == "textarea":
            value = st.text_area(
                f"{'üî¥ ' if required else ''}{question_text}",
                value=saved_value or "",
                key=f"q_{question_id}",
                height=100,
                placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç..."
            )
            if value != saved_value:
                save_questionnaire_response(question_id, value)
            if required and not value:
                all_filled = False
                
        elif question_type == "date":
            try:
                default_date = datetime.strptime(saved_value, "%Y-%m-%d").date() if saved_value else date.today()
            except:
                default_date = date.today()
            
            value = st.date_input(
                f"{'üî¥ ' if required else ''}{question_text}",
                value=default_date,
                key=f"q_{question_id}",
                min_value=date(1950, 1, 1),
                max_value=date.today()
            )
            save_questionnaire_response(question_id, str(value))
            
        elif question_type == "select":
            options = question["options"]
            index = 0
            if saved_value and saved_value in options:
                index = options.index(saved_value)
            
            value = st.selectbox(
                f"{'üî¥ ' if required else ''}{question_text}",
                options,
                index=index,
                key=f"q_{question_id}"
            )
            save_questionnaire_response(question_id, value)
            if required and not value:
                all_filled = False
                
        elif question_type == "radio":
            options = question["options"]
            index = 0
            if saved_value and saved_value in options:
                index = options.index(saved_value)
            
            value = st.radio(
                f"{'üî¥ ' if required else ''}{question_text}",
                options,
                index=index,
                key=f"q_{question_id}",
                horizontal=True
            )
            save_questionnaire_response(question_id, value)
            if required and not value:
                all_filled = False
                
        elif question_type == "multiselect":
            options = question["options"]
            default = saved_value.split(", ") if saved_value else []
            
            value = st.multiselect(
                f"{'üî¥ ' if required else ''}{question_text}",
                options,
                default=default,
                key=f"q_{question_id}"
            )
            save_questionnaire_response(question_id, ", ".join(value))
            if required and not value:
                all_filled = False
                
        elif question_type == "number":
            value = st.number_input(
                f"{'üî¥ ' if required else ''}{question_text}",
                value=int(saved_value) if saved_value else 0,
                min_value=0,
                max_value=100,
                key=f"q_{question_id}"
            )
            save_questionnaire_response(question_id, str(value))
            
        elif question_type == "slider":
            min_val = question.get("min", 1)
            max_val = question.get("max", 5)
            value = st.slider(
                f"{'üî¥ ' if required else ''}{question_text}",
                min_value=min_val,
                max_value=max_val,
                value=int(saved_value) if saved_value else min_val,
                key=f"q_{question_id}"
            )
            save_questionnaire_response(question_id, str(value))
        
        st.markdown("---")
    
    return all_filled

def prepare_screening_questions():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–æ—Ä—è–¥–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞"""
    questions = []
    for scale, scale_questions in SCREENING_QUESTIONS.items():
        for question in scale_questions:
            questions.append({
                "id": question["id"],
                "text": question["text"],
                "scale": scale
            })
    np.random.shuffle(questions)
    st.session_state.questions_order = questions
    st.session_state.current_question_index = 0

def show_question(question, progress=None):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ —Å —à–∫–∞–ª–æ–π –æ—Ç–≤–µ—Ç–æ–≤"""
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
    col1, col2 = st.columns([3, 1])
    with col1:
        st.subheader(f"–í–æ–ø—Ä–æ—Å {st.session_state.current_question_index + 1} –∏–∑ {len(st.session_state.questions_order)}")
    with col2:
        if progress is not None:
            st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{int(progress * 100)}%")
    
    if progress is not None:
        st.progress(progress)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞
    st.markdown(f"""
    ### üí≠ {question['text']}
    """)
    
    # –û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–æ
    if st.session_state.tts_enabled and AUDIO_AVAILABLE:
        audio_container = st.empty()
        
        if os.environ.get("OPENAI_API_KEY"):
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏–µ –ø—Ä–∏ –ø–æ—è–≤–ª–µ–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–∞
            if st.session_state.last_question_id != question['id']:
                audio_html = generate_speech(question['text'], voice=st.session_state.tts_voice, language=st.session_state.tts_language)
                if audio_html:
                    audio_container.markdown(audio_html, unsafe_allow_html=True)
                    st.session_state.last_question_id = question['id']
            
            # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è
            if st.button("üîä –û–∑–≤—É—á–∏—Ç—å –µ—â–µ —Ä–∞–∑", key="tts_button"):
                audio_html = generate_speech(question['text'], voice=st.session_state.tts_voice, language=st.session_state.tts_language)
                if audio_html:
                    audio_container.markdown(audio_html, unsafe_allow_html=True)
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏ –æ—Ç 1 –¥–æ 5
    st.markdown("**–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç:**")
    
    cols = st.columns(5)
    selected_value = None
    
    button_labels = [
        "1Ô∏è‚É£ –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω",
        "2Ô∏è‚É£ –°–∫–æ—Ä–µ–µ –Ω–µ —Å–æ–≥–ª–∞—Å–µ–Ω", 
        "3Ô∏è‚É£ –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ",
        "4Ô∏è‚É£ –°–∫–æ—Ä–µ–µ —Å–æ–≥–ª–∞—Å–µ–Ω",
        "5Ô∏è‚É£ –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–æ–≥–ª–∞—Å–µ–Ω"
    ]
    
    for i, col in enumerate(cols):
        value = i + 1
        with col:
            if col.button(button_labels[i], key=f"btn_{question['id']}_{value}", use_container_width=True):
                selected_value = value
    
    # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –æ—Ç–≤–µ—Ç, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    if selected_value is not None:
        save_response(question['id'], selected_value)

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞
        st.success(f"‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –∑–∞–ø–∏—Å–∞–Ω: {selected_value}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã
        if st.session_state.current_question_index < len(st.session_state.questions_order) - 1:
            st.session_state.current_question_index += 1
        else:
            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
            if st.session_state.stage == 'screening':
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø–µ—Ä–≤–∏—á–Ω—ã–π —Å–∫—Ä–∏–Ω–∏–Ω–≥
                st.session_state.stage = 'results'
                analyze_results()
            elif st.session_state.stage == 'medium_risk_assessment':
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ü–µ–Ω–∫—É —Å—Ä–µ–¥–Ω–µ–π —à–∫–∞–ª—ã —Ä–∏—Å–∫–∞
                complete_detailed_assessment('medium')
            elif st.session_state.stage == 'high_risk_assessment':
                # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ—Ü–µ–Ω–∫—É –≤—ã—Å–æ–∫–æ–π —à–∫–∞–ª—ã —Ä–∏—Å–∫–∞
                complete_detailed_assessment('high')

        st.rerun()
    
    # –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å
    if question['id'] in st.session_state.responses:
        prev_answer = st.session_state.responses[question['id']]
        st.info(f"–í–∞—à –ø—Ä–µ–¥—ã–¥—É—â–∏–π –æ—Ç–≤–µ—Ç: {prev_answer} - {button_labels[prev_answer-1].split(' ', 1)[1]}")

def analyze_results():
    """–ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞"""
    scores = {}
    positive_answers = {}  # –°—á–µ—Ç—á–∏–∫ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π —à–∫–∞–ª—ã
    
    # –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –∏ –ø–æ–¥—Å—á–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–π —à–∫–∞–ª–µ
    for scale in SCREENING_QUESTIONS.keys():
        score = 0
        count = 0
        positive_count = 0
        
        for question_id, value in st.session_state.responses.items():
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫ –∫–∞–∫–æ–π —à–∫–∞–ª–µ –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –≤–æ–ø—Ä–æ—Å
            for s, questions in SCREENING_QUESTIONS.items():
                if any(q['id'] == question_id for q in questions):
                    if s == scale:
                        score += value
                        count += 1
                        # –°—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 4 –∏–ª–∏ 5
                        if value >= 4:
                            positive_count += 1
                    break
        
        if count > 0:
            scores[scale] = score
            positive_answers[scale] = positive_count
    
    st.session_state.scale_scores = scores
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
    risk_levels = {}
    risk_levels_desc = {}
    medium_risk_scales = []
    high_risk_scales = []
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π —à–∫–∞–ª—ã
    for scale, score in scores.items():
        if scale == 'sincerity':
            # –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è —à–∫–∞–ª—ã –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç–∏
            if score >= 13 or score <= 4:
                risk_levels[scale] = "warning"
                risk_levels_desc[scale] = "–Ω–∏–∑–∫–∞—è –∏—Å–∫—Ä–µ–Ω–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤"
        else:
            # –ï—Å–ª–∏ 2 –∏–ª–∏ –±–æ–ª–µ–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–∞ –≤ —Å–∫—Ä–∏–Ω–∏–Ω–≥–µ
            if positive_answers.get(scale, 0) >= 2:
                risk_levels[scale] = "medium"
                risk_levels_desc[scale] = "—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)"
                medium_risk_scales.append(scale)
            else:
                risk_levels[scale] = "low"
                risk_levels_desc[scale] = "–Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"
    
    st.session_state.risk_levels = risk_levels
    st.session_state.risk_levels_desc = risk_levels_desc
    st.session_state.medium_risk_scales = medium_risk_scales
    st.session_state.high_risk_scales = high_risk_scales
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç—Ç–∞–ø–∞
    if medium_risk_scales:
        # –ï—Å—Ç—å —à–∫–∞–ª—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º - –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        st.session_state.stage = 'medium_risk_assessment'
        st.session_state.current_scale = medium_risk_scales[0]
        prepare_detailed_questions(medium_risk_scales[0], "medium")
    else:
        # –í—Å–µ —à–∫–∞–ª—ã –≤ –Ω–æ—Ä–º–µ - –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
        st.session_state.stage = 'results'
        prepare_final_recommendations()

def prepare_detailed_questions(scale, risk_level):
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    questions = []
    
    if risk_level == "medium" and scale in MEDIUM_RISK_QUESTIONS:
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
        for question in MEDIUM_RISK_QUESTIONS[scale]:
            questions.append({
                "id": question["id"],
                "text": question["text"],
                "scale": scale
            })
    elif risk_level == "high" and scale in HIGH_RISK_QUESTIONS:
        # –ü–æ–ª–Ω—ã–π –æ–ø—Ä–æ—Å–Ω–∏–∫ –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
        for question in HIGH_RISK_QUESTIONS[scale]:
            questions.append({
                "id": question["id"],
                "text": question["text"],
                "scale": scale
            })
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–ø—Ä–æ—Å—ã —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
    if not questions and scale in MEDIUM_RISK_QUESTIONS:
        for question in MEDIUM_RISK_QUESTIONS[scale]:
            questions.append({
                "id": question["id"],
                "text": question["text"],
                "scale": scale
            })
    
    np.random.shuffle(questions)
    st.session_state.questions_order = questions
    st.session_state.current_question_index = 0

def prepare_final_recommendations():
    """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏—Ç–æ–≥–æ–≤—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    recommendations = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞ –≤ –ª—é–±–æ–π —à–∫–∞–ª–µ
    has_high_risk = False
    for scale, level in st.session_state.risk_levels_desc.items():
        if "–≤—ã—Å–æ–∫–∏–π" in level:
            has_high_risk = True
            recommendations.append(f"‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω –≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ –ø–æ —à–∫–∞–ª–µ '{SCALE_NAMES.get(scale, scale)}'")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∏—Å–∫–∞ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–∞
    questionnaire = st.session_state.questionnaire_responses
    has_religious_teacher = bool(questionnaire.get('religion_teachers', '').strip())
    # Debug statements for religious and social factors
    
    frequent_attendance = questionnaire.get('religious_attendance') in ['–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å']
    no_social_events = questionnaire.get('social_events') == '–ù–µ—Ç'

    st.write("Debug: Religious teacher present:", has_religious_teacher)
    st.write("Debug: Religious attendance:", questionnaire.get('religious_attendance'))
    st.write("Debug: Social events participation:", questionnaire.get('social_events'))
    print("Debug: Religious teacher present:", has_religious_teacher)
    print("Debug: Religious attendance:", questionnaire.get('religious_attendance'))
    print("Debug: Social events participation:", questionnaire.get('social_events'))
    
    if has_religious_teacher and frequent_attendance and no_social_events:
        has_high_risk = True
        recommendations.append("‚ö†Ô∏è –í—ã—è–≤–ª–µ–Ω —Ä–∏—Å–∫ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–∞")
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫, –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—â—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é
    if has_high_risk:
        recommendations.append("‚ùå **–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ**")
        st.session_state.military_recommendation = "not_recommended"
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
        medium_risk_scales = []
        for scale, level in st.session_state.risk_levels_desc.items():
            if "—Å—Ä–µ–¥–Ω–∏–π" in level:
                medium_risk_scales.append(SCALE_NAMES.get(scale, scale))
        
        if medium_risk_scales:
            recommendations.append(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ —Å–ª–µ–¥—É—é—â–∏–º –∞—Å–ø–µ–∫—Ç–∞–º: {', '.join(medium_risk_scales)}")
            recommendations.append("‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏**")
            st.session_state.military_recommendation = "recommended_with_restrictions"
        else:
            recommendations.append("‚úÖ **–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ**")
            st.session_state.military_recommendation = "recommended"
    
    st.session_state.final_recommendations = recommendations

def complete_detailed_assessment(risk_level):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–π —à–∫–∞–ª—ã"""
    current_scale = st.session_state.current_scale
    
    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    detailed_score = 0
    question_count = 0
    positive_count = 0
    
    for question_id, value in st.session_state.responses.items():
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–Ω–æ—Å–∏—Ç—Å—è –ª–∏ –≤–æ–ø—Ä–æ—Å –∫ —Ç–µ–∫—É—â–µ–π —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–µ
        if risk_level == "medium" and current_scale in MEDIUM_RISK_QUESTIONS:
            if any(q['id'] == question_id for q in MEDIUM_RISK_QUESTIONS[current_scale]):
                detailed_score += value
                question_count += 1
                if value >= 4:  # –°—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 4 –∏–ª–∏ 5
                    positive_count += 1
        elif risk_level == "high" and current_scale in HIGH_RISK_QUESTIONS:
            if any(q['id'] == question_id for q in HIGH_RISK_QUESTIONS[current_scale]):
                detailed_score += value
                question_count += 1
                if value >= 4:  # –°—á–∏—Ç–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º, –µ—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ 4 –∏–ª–∏ 5
                    positive_count += 1
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
    if question_count > 0:
        max_possible = question_count * 5  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–ª (5 –±–∞–ª–ª–æ–≤ –∑–∞ –≤–æ–ø—Ä–æ—Å)
        percentage = (detailed_score / max_possible) * 100
        
        st.session_state.detailed_results[current_scale] = {
            'score': detailed_score,
            'max_possible': max_possible,
            'percentage': percentage,
            'positive_count': positive_count,
            'total_questions': question_count
        }
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        if risk_level == "medium":
            # –ï—Å–ª–∏ –±–æ–ª–µ–µ 50% –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã—Å–æ–∫–æ–π –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞
            if positive_count > question_count / 2:
                st.session_state.risk_levels_desc[current_scale] = "–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π)"
                st.session_state.high_risk_scales.append(current_scale)
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã—Å–æ–∫–æ–π –æ—Ü–µ–Ω–∫–µ —Ä–∏—Å–∫–∞
                st.session_state.stage = 'high_risk_assessment'
                prepare_detailed_questions(current_scale, "high")
                return
            else:
                st.session_state.risk_levels_desc[current_scale] = "—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π)"
        elif risk_level == "high":
            if percentage >= 70:
                st.session_state.risk_levels_desc[current_scale] = "–≤—ã—Å–æ–∫–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–æ–π)"
            else:
                st.session_state.risk_levels_desc[current_scale] = "—Å—Ä–µ–¥–Ω–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞ (—Å–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å–ª–µ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏)"
    
    # –û—Ç–º–µ—á–∞–µ–º —à–∫–∞–ª—É –∫–∞–∫ –æ—Ü–µ–Ω–µ–Ω–Ω—É—é
    if hasattr(st.session_state, 'evaluated_scales'):
        st.session_state.evaluated_scales.append(current_scale)
    else:
        st.session_state.evaluated_scales = [current_scale]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø
    if risk_level == "high":
        # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —à–∫–∞–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞ high_risk_scales
        remaining_high_risk = [s for s in st.session_state.high_risk_scales if s != current_scale]
        st.session_state.high_risk_scales = remaining_high_risk
        
        if remaining_high_risk:
            # –ï—Å—Ç—å –µ—â–µ —à–∫–∞–ª—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
            st.session_state.current_scale = remaining_high_risk[0]
            prepare_detailed_questions(remaining_high_risk[0], "high")
        else:
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
            st.session_state.stage = 'results'
            prepare_final_recommendations()
    
    elif risk_level == "medium":
        # –£–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â—É—é —à–∫–∞–ª—É –∏–∑ —Å–ø–∏—Å–∫–∞ medium_risk_scales
        remaining_medium_risk = [s for s in st.session_state.medium_risk_scales if s != current_scale]
        remaining_medium_risk = [s for s in remaining_medium_risk if s not in st.session_state.evaluated_scales]
        st.session_state.medium_risk_scales = remaining_medium_risk
        
        if remaining_medium_risk:
            # –ï—Å—Ç—å –µ—â–µ —à–∫–∞–ª—ã —Å–æ —Å—Ä–µ–¥–Ω–∏–º —Ä–∏—Å–∫–æ–º
            st.session_state.current_scale = remaining_medium_risk[0]
            prepare_detailed_questions(remaining_medium_risk[0], "medium")
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∫–∞–ª—ã —Å –≤—ã—Å–æ–∫–∏–º —Ä–∏—Å–∫–æ–º
            if st.session_state.high_risk_scales:
                st.session_state.stage = 'high_risk_assessment'
                st.session_state.current_scale = st.session_state.high_risk_scales[0]
                prepare_detailed_questions(st.session_state.high_risk_scales[0], "high")
            else:
                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º
                st.session_state.stage = 'results'
                prepare_final_recommendations()

def show_screening():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞"""
    st.title("üîç –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–Ω–∏–Ω–≥")
    
    st.markdown("""
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã, –≤—ã–±–∏—Ä–∞—è –æ—Ü–µ–Ω–∫—É –æ—Ç 1 –¥–æ 5.
    
    üìù **–ü–æ–º–Ω–∏—Ç–µ**: –ù–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∏–ª–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤. –û—Ç–≤–µ—á–∞–π—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ —Ç–æ–º, –∫–∞–∫ –≤—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—Ç–µ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è.
    """)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = st.session_state.current_question_index / len(st.session_state.questions_order)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = st.session_state.questions_order[st.session_state.current_question_index]
    show_question(question, progress)

def show_sincerity_warning():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ –≤–æ–∑–º–æ–∂–Ω–æ–π –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏ –æ—Ç–≤–µ—Ç–æ–≤"""
    st.title("‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –í–æ–∑–º–æ–∂–Ω–∞—è –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤")
    
    st.warning("""
    ## üö® –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ
    
    –°–∏—Å—Ç–µ–º–∞ –æ–±–Ω–∞—Ä—É–∂–∏–ª–∞ –≤–æ–∑–º–æ–∂–Ω—É—é –Ω–µ–¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –≤ –≤–∞—à–∏—Ö –æ—Ç–≤–µ—Ç–∞—Ö. –≠—Ç–æ –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ç–æ—á–Ω–æ—Å—Ç—å –æ—Ü–µ–Ω–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ.
    """)
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        **üéØ –û–¥–Ω–æ–æ–±—Ä–∞–∑–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤**
        
        –í—ã –º–æ–≥–ª–∏ –æ—Ç–≤–µ—á–∞—Ç—å —Å–ª–∏—à–∫–æ–º –æ–¥–Ω–æ–æ–±—Ä–∞–∑–Ω–æ
        """)
    
    with col2:
        st.markdown("""
        **‚ùì –ù–µ–ø–æ–Ω–∏–º–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–æ–≤**
        
        –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏ –±—ã–ª–∏ –Ω–µ—è—Å–Ω—ã
        """)
    
    with col3:
        st.markdown("""
        **üé≠ –°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å**
        
        –°—Ç—Ä–µ–º–ª–µ–Ω–∏–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å —Å–µ–±—è –≤ –ª—É—á—à–µ–º —Å–≤–µ—Ç–µ
        """)
    
    st.info("üí° **–î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π –æ—Ü–µ–Ω–∫–∏ –≤–∞–∂–Ω–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —á–µ—Å—Ç–Ω–æ—Å—Ç—å.**")
    
    col1, col2 = st.columns(2)
    with col1:
        if st.button("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ", use_container_width=True):
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–Ω–∫–µ—Ç—É, –Ω–æ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–µ—Å—Ç
            questionnaire_data = st.session_state.questionnaire_responses.copy()
            reset_session()
            st.session_state.questionnaire_responses = questionnaire_data
            st.session_state.questionnaire_completed = True
            st.session_state.stage = 'screening'
            prepare_screening_questions()
            st.rerun()
    
    with col2:
        if st.button("‚û°Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Å —Ç–µ–∫—É—â–∏–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏", use_container_width=True):
            st.session_state.risk_levels['sincerity'] = "warning_ignored"
            
            if st.session_state.high_risk_scales:
                st.session_state.stage = 'high_risk_assessment'
                st.session_state.current_scale = st.session_state.high_risk_scales[0]
                prepare_detailed_questions(st.session_state.high_risk_scales[0], "high")
            elif st.session_state.medium_risk_scales:
                st.session_state.stage = 'medium_risk_assessment'
                st.session_state.current_scale = st.session_state.medium_risk_scales[0]
                prepare_detailed_questions(st.session_state.medium_risk_scales[0], "medium")
            else:
                st.session_state.stage = 'results'
                prepare_final_recommendations()
            
            st.rerun()

def show_detailed_assessment():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–∞ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏"""
    current_scale = st.session_state.current_scale
    scale_name = SCALE_NAMES.get(current_scale, current_scale)
    risk_level = "—Å—Ä–µ–¥–Ω–∏–º" if st.session_state.stage == 'medium_risk_assessment' else "–≤—ã—Å–æ–∫–∏–º"
    
    st.title(f"üéØ –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞")
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–∞—è –ø–∞–Ω–µ–ª—å
    st.info(f"""
    **üìä {scale_name}**
    
    –ü–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ –≤—ã—è–≤–ª–µ–Ω **{risk_level} —Ä–∏—Å–∫** –ø–æ –¥–∞–Ω–Ω–æ–π —à–∫–∞–ª–µ.
    
    –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –æ—Ü–µ–Ω–∫–∏.
    """)
    
    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    progress = st.session_state.current_question_index / len(st.session_state.questions_order)
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
    question = st.session_state.questions_order[st.session_state.current_question_index]
    show_question(question, progress)

def show_results():
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    st.title("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –≤–æ–µ–Ω–Ω–æ—Å–ª—É–∂–∞—â–µ–≥–æ")
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    questionnaire = st.session_state.questionnaire_responses
    
    st.markdown(f"""
    ## üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞–Ω–¥–∏–¥–∞—Ç–µ
    
    **–§–ò–û**: {questionnaire.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}  
    **–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è**: {questionnaire.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}  
    **–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å**: {questionnaire.get('nationality', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}  
    **–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ**: {questionnaire.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}  
    **–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ**: {questionnaire.get('marital_status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
    """)
    
    st.markdown("---")
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –±—ã–ª–æ
    if st.session_state.risk_levels.get('sincerity') == "warning_ignored":
        st.error("‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–≥—É—Ç –∏–º–µ—Ç—å —Å–Ω–∏–∂–µ–Ω–Ω—É—é –¥–æ—Å—Ç–æ–≤–µ—Ä–Ω–æ—Å—Ç—å –∏–∑-–∑–∞ –≤—ã—è–≤–ª–µ–Ω–Ω—ã—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π –≤ –æ—Ç–≤–µ—Ç–∞—Ö.")
    
    # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Å–ª—É–∂–±–µ
    st.subheader("ü™ñ –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ")
    
    # –ê–Ω–∞–ª–∏–∑ –∫–ª—é—á–µ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
    critical_issues = []
    warning_issues = []
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    if questionnaire.get("family_suicides") == "–î–∞" or questionnaire.get("personal_suicides") == "–î–∞":
        critical_issues.append("–°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
    
    if questionnaire.get("want_serve") == "–ù–µ—Ç":
        critical_issues.append("–ù–µ–∂–µ–ª–∞–Ω–∏–µ —Å–ª—É–∂–∏—Ç—å")
    
    high_risk_scales = [scale for scale, level in st.session_state.risk_levels_desc.items() if "–≤—ã—Å–æ–∫–∏–π" in level]
    if high_risk_scales:
        critical_issues.append(f"–í—ã—Å–æ–∫–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏ ({len(high_risk_scales)} —à–∫–∞–ª)")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
    dependencies = []
    if questionnaire.get("family_alcoholism") == "–î–∞" or questionnaire.get("personal_alcoholism") == "–î–∞":
        dependencies.append("–∞–ª–∫–æ–≥–æ–ª–∏–∑–º")
    if questionnaire.get("family_drugs") == "–î–∞" or questionnaire.get("personal_drugs") == "–î–∞":
        dependencies.append("–Ω–∞—Ä–∫–æ–º–∞–Ω–∏—è")
    if questionnaire.get("personal_gambling") == "–î–∞" or questionnaire.get("betting") == "–î–∞":
        dependencies.append("–∏–≥—Ä–æ–≤–∞—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å")
    
    if dependencies:
        warning_issues.append(f"–§–∞–∫—Ç–æ—Ä—ã –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: {', '.join(dependencies)}")
    
    if questionnaire.get("credits"):
        warning_issues.append("–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–∞")
    
    if questionnaire.get("hidden_health_facts"):
        warning_issues.append("–°–∫—Ä—ã—Ç—ã–µ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ–∞–∫—Ç—ã")
    
    # Add this to the critical factors check section
    if (bool(questionnaire.get('religion_teachers', '').strip()) and 
        questionnaire.get('religious_attendance') in ['–ù–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –≤ –Ω–µ–¥–µ–ª—é', '–ö–∞–∂–¥—ã–π –¥–µ–Ω—å'] and 
        questionnaire.get('social_events') == '–ù–µ—Ç'):
        critical_issues.append("–†–∏—Å–∫ —ç–∫—Å—Ç—Ä–µ–º–∏–∑–º–∞")
    
    # –ò—Ç–æ–≥–æ–≤–æ–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–µ
    if critical_issues:
        st.error(f"""
        **‚ùå –ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ**
        
        –í—ã—è–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:
        {chr(10).join('‚Ä¢ ' + issue for issue in critical_issues)}
        """)
        recommendation_color = "üî¥"
        final_recommendation = "–ù–µ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ"
    elif warning_issues:
        st.warning(f"""
        **‚ö†Ô∏è –£–°–õ–û–í–ù–û –ì–û–î–ï–ù –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ**
        
        –í—ã—è–≤–ª–µ–Ω—ã —Ñ–∞–∫—Ç–æ—Ä—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –≤–Ω–∏–º–∞–Ω–∏—è:
        {chr(10).join('‚Ä¢ ' + issue for issue in warning_issues)}
        
        –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ.
        """)
        recommendation_color = "üü°"
        final_recommendation = "–£–°–õ–û–í–ù–û –ì–û–î–ï–ù"
    else:
        st.success("""
        **‚úÖ –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ**
        
        –°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ.
        –ö–∞–Ω–¥–∏–¥–∞—Ç –≥–æ—Ç–æ–≤ –∫ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—é –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã.
        """)
        recommendation_color = "üü¢"
        final_recommendation = "–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø"
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        st.metric("–ó–∞–∫–ª—é—á–µ–Ω–∏–µ", final_recommendation)
    with col2:
        st.metric("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏", len(critical_issues))
    with col3:
        st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è", len(warning_issues))
    with col4:
        st.metric("–í–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç–≤–µ—á–µ–Ω–æ", len(st.session_state.responses))
    
    st.markdown("---")
    
    # –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    st.subheader("üß† –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
    if st.session_state.scale_scores:
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        scales = []
        scores = []
        max_scores = []
        colors = []
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞
        for scale, score in st.session_state.scale_scores.items():
            if scale == 'sincerity':
                continue
            
            scales.append(SCALE_NAMES.get(scale, scale))
            scores.append(score)
            max_scores.append(15)  # –ú–∞–∫—Å–∏–º—É–º –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–≥–æ —Å–∫—Ä–∏–Ω–∏–Ω–≥–∞ - 15 –±–∞–ª–ª–æ–≤
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
            if score <= THRESHOLDS["low"][1]:
                colors.append('#4CAF50')  # –ó–µ–ª–µ–Ω—ã–π –¥–ª—è –Ω–∏–∑–∫–æ–≥–æ —Ä–∏—Å–∫–∞
            elif score <= THRESHOLDS["medium"][1]:
                colors.append('#FFC107')  # –ñ–µ–ª—Ç—ã–π –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–∏—Å–∫–∞
            else:
                colors.append('#F44336')  # –ö—Ä–∞—Å–Ω—ã–π –¥–ª—è –≤—ã—Å–æ–∫–æ–≥–æ —Ä–∏—Å–∫–∞
        
        # –î–∞–Ω–Ω—ã–µ –∏–∑ —É–≥–ª—É–±–ª–µ–Ω–Ω–æ–π –æ—Ü–µ–Ω–∫–∏
        for scale, result in st.session_state.detailed_results.items():
            scale_name = f"{SCALE_NAMES.get(scale, scale)} (—É–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)"
            
            scales.append(scale_name)
            scores.append(result['score'])
            max_scores.append(result['max_possible'])
            
            # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç–∞
            percentage = result['percentage']
            if percentage < 33:
                colors.append('#4CAF50')  # –ó–µ–ª–µ–Ω—ã–π
            elif percentage < 67:
                colors.append('#FFC107')  # –ñ–µ–ª—Ç—ã–π
            else:
                colors.append('#F44336')  # –ö—Ä–∞—Å–Ω—ã–π
        
        if scales:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
            df = pd.DataFrame({
                '–®–∫–∞–ª–∞': scales,
                '–ë–∞–ª–ª': scores,
                '–ú–∞–∫—Å–∏–º—É–º': max_scores,
                '–¶–≤–µ—Ç': colors
            })
            
            # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤ –æ—Ç –º–∞–∫—Å–∏–º—É–º–∞
            df['–ü—Ä–æ—Ü–µ–Ω—Ç'] = (df['–ë–∞–ª–ª'] / df['–ú–∞–∫—Å–∏–º—É–º']) * 100
            
            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            fig, ax = plt.subplots(figsize=(12, 8))
            
            # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
            bars = ax.barh(df['–®–∫–∞–ª–∞'], df['–ü—Ä–æ—Ü–µ–Ω—Ç'], color=df['–¶–≤–µ—Ç'], alpha=0.8)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–µ–π –∑–Ω–∞—á–µ–Ω–∏–π
            for i, bar in enumerate(bars):
                width = bar.get_width()
                label_x_pos = width + 1
                ax.text(label_x_pos, bar.get_y() + bar.get_height()/2, 
                       f'{df["–ë–∞–ª–ª"].iloc[i]}/{df["–ú–∞–∫—Å–∏–º—É–º"].iloc[i]} ({width:.1f}%)',
                       va='center', fontsize=10, fontweight='bold')
            
            ax.set_xlabel('–ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è', fontsize=12)
            ax.set_title('–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è', fontsize=16, fontweight='bold', pad=20)
            ax.set_xlim(0, 110)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ª–∏–Ω–∏–π —É—Ä–æ–≤–Ω–µ–π —Ä–∏—Å–∫–∞
            ax.axvline(x=33.33, color='gray', linestyle='--', alpha=0.7, linewidth=1)
            ax.axvline(x=66.67, color='gray', linestyle='--', alpha=0.7, linewidth=1)
            
            # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–∏—Å–∫–∞
            ax.axvspan(0, 33.33, alpha=0.1, color='green', label='–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫')
            ax.axvspan(33.33, 66.67, alpha=0.1, color='yellow', label='–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫')
            ax.axvspan(66.67, 100, alpha=0.1, color='red', label='–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫')
            
            ax.grid(axis='x', alpha=0.3)
            ax.legend(loc='lower right')
            
            plt.xticks(fontsize=10)
            plt.yticks(fontsize=10)
            plt.tight_layout()
            
            st.pyplot(fig)
    
    # –ü–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    st.subheader("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø–æ —à–∫–∞–ª–∞–º")
    
    if st.session_state.risk_levels_desc:
        for scale, level in st.session_state.risk_levels_desc.items():
            scale_name = SCALE_NAMES.get(scale, scale)
            
            if "–≤—ã—Å–æ–∫–∏–π" in level:
                emoji = "üî¥"
            elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                emoji = "üü°"
            else:
                emoji = "üü¢"
            
            with st.container():
                st.markdown(f"### {emoji} {scale_name}")
                st.markdown(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞**: {level}")
                
                # –°–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –¥–ª—è –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã
                if scale == "aggression":
                    if "–≤—ã—Å–æ–∫–∏–π" in level:
                        st.error("‚ö†Ô∏è **–í–û–ï–ù–ù–´–ô –†–ò–°–ö**: –í—ã—Å–æ–∫–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º –≤ –≤–æ–∏–Ω—Å–∫–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ –∏ –Ω–∞—Ä—É—à–µ–Ω–∏—è–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.")
                    elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                        st.warning("‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –£–º–µ—Ä–µ–Ω–Ω–∞—è –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å. –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Ç—Ä–æ–ª—å –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.")
                    else:
                        st.success("‚úÖ **–ù–û–†–ú–ê**: –ê–≥—Ä–µ—Å—Å–∏–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –Ω–æ—Ä–º—ã. –•–æ—Ä–æ—à–∏–π —Å–∞–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å.")
                
                elif scale == "military_adaptation":
                    if "–≤—ã—Å–æ–∫–∏–π" in level:
                        st.error("‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ù–û**: –°–µ—Ä—å–µ–∑–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –∞–¥–∞–ø—Ç–∞—Ü–∏–µ–π –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞.")
                    elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                        st.warning("‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –ú–æ–≥—É—Ç –≤–æ–∑–Ω–∏–∫–Ω—É—Ç—å —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É—Å–∏–ª–µ–Ω–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.")
                    else:
                        st.success("‚úÖ **–û–¢–õ–ò–ß–ù–û**: –•–æ—Ä–æ—à–∏–µ –ø—Ä–µ–¥–ø–æ—Å—ã–ª–∫–∏ –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±—ã.")
                
                elif scale == "isolation":
                    if "–≤—ã—Å–æ–∫–∏–π" in level:
                        st.error("‚ö†Ô∏è **–í–û–ï–ù–ù–´–ô –†–ò–°–ö**: –°–∫–ª–æ–Ω–Ω–æ—Å—Ç—å –∫ –∏–∑–æ–ª—è—Ü–∏–∏ –º–æ–∂–µ—Ç —É—Å—É–≥—É–±–∏—Ç—å—Å—è –≤ —É—Å–ª–æ–≤–∏—è—Ö –∫–∞–∑–∞—Ä–º—ã.")
                    elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                        st.warning("‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–µ —á—É–≤—Å—Ç–≤–æ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞. –í–∞–∂–Ω–∞ —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞.")
                    else:
                        st.success("‚úÖ **–ù–û–†–ú–ê**: –•–æ—Ä–æ—à–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥–Ω–æ–π —Ä–∞–±–æ—Ç—ã.")
                
                elif scale == "anxiety":
                    if "–≤—ã—Å–æ–∫–∏–π" in level:
                        st.error("‚ö†Ô∏è **–í–û–ï–ù–ù–´–ô –†–ò–°–ö**: –í—ã—Å–æ–∫–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ —Å—Ä—ã–≤–∞–º –≤ —ç–∫—Å—Ç—Ä–µ–º–∞–ª—å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.")
                    elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                        st.warning("‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –£–º–µ—Ä–µ–Ω–Ω–∞—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å. –†–µ–∫–æ–º–µ–Ω–¥—É—é—Ç—Å—è —Ç–µ—Ö–Ω–∏–∫–∏ —Å—Ç—Ä–µ—Å—Å-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞.")
                    else:
                        st.success("‚úÖ **–ù–û–†–ú–ê**: –•–æ—Ä–æ—à–∞—è —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.")
                
                elif scale == "stability":
                    if "–≤—ã—Å–æ–∫–∏–π" in level:
                        st.error("‚ö†Ô∏è **–ö–†–ò–¢–ò–ß–ù–û**: –ù–∏–∑–∫–∞—è –ø—Å–∏—Ö–∏—á–µ—Å–∫–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –Ω–µ—Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–æ–π.")
                    elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                        st.warning("‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –í–æ–∑–º–æ–∂–Ω—ã —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ –≤ —Å—Ç—Ä–µ—Å—Å–æ–≤—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö.")
                    else:
                        st.success("‚úÖ **–û–¢–õ–ò–ß–ù–û**: –í—ã—Å–æ–∫–∞—è —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å.")
                
                elif scale == "somatic":
                    if "–≤—ã—Å–æ–∫–∏–π" in level:
                        st.error("‚ö†Ô∏è **–ú–ï–î–ò–¶–ò–ù–°–ö–ò–ô –†–ò–°–ö**: –°–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è —Å—Ç—Ä–µ—Å—Å–∞ –º–æ–≥—É—Ç —É—Å—É–≥—É–±–∏—Ç—å—Å—è –≤ –∞—Ä–º–∏–∏.")
                    elif "—Å—Ä–µ–¥–Ω–∏–π" in level:
                        st.warning("‚ö†Ô∏è **–í–ù–ò–ú–ê–ù–ò–ï**: –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–∏–º–ø—Ç–æ–º—ã —Å—Ç—Ä–µ—Å—Å–∞.")
                    else:
                        st.success("‚úÖ **–ù–û–†–ú–ê**: –•–æ—Ä–æ—à–∞—è —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è–º —Å—Ç—Ä–µ—Å—Å–∞.")
                
                st.markdown("---")
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    st.subheader("üìÑ –ó–∞–∫–ª—é—á–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∞")
    
    conclusion_template = f"""
**–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï**

–ö–∞–Ω–¥–∏–¥–∞—Ç: {questionnaire.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
–î–∞—Ç–∞ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {datetime.now().strftime('%d.%m.%Y')}

**–ò–¢–û–ì–û–í–û–ï –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï**: {recommendation_color} {final_recommendation}

**–û–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ**:
"""
    
    if critical_issues:
        conclusion_template += f"\n–í—ã—è–≤–ª–µ–Ω—ã –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞: {', '.join(critical_issues)}"
    
    if warning_issues:
        conclusion_template += f"\n–í—ã—è–≤–ª–µ–Ω—ã –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—é—â–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã: {', '.join(warning_issues)}"
    
    if not critical_issues and not warning_issues:
        conclusion_template += "\n–°–µ—Ä—å–µ–∑–Ω—ã—Ö –ø—Ä–æ—Ç–∏–≤–æ–ø–æ–∫–∞–∑–∞–Ω–∏–π –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ –Ω–µ –≤—ã—è–≤–ª–µ–Ω–æ."
    
    if hasattr(st.session_state, 'recommendations') and st.session_state.recommendations:
        conclusion_template += f"""

**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏**:
{chr(10).join('‚Ä¢ ' + rec.split('] ', 1)[-1] if '] ' in rec else rec for rec in st.session_state.recommendations[:3])}

–ü—Å–∏—Ö–æ–ª–æ–≥: ________________
–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}
"""
    
    st.text_area("", value=conclusion_template, height=300, disabled=True)
    
    # –î–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    st.subheader("üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìÑ –ü–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç (TXT)", use_container_width=True):
            try:
                report_text = generate_military_report()
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç",
                    data=report_text,
                    file_name=f"military_assessment_{questionnaire.get('full_name', 'candidate')}_{st.session_state.session_id}.txt",
                    mime="text/plain"
                )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞: {str(e)}")
    
    with col2:
        if st.button("üìä –î–∞–Ω–Ω—ã–µ (CSV)", use_container_width=True):
            try:
                csv_data = generate_military_csv()
                st.download_button(
                    label="üì• –°–∫–∞—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ",
                    data=csv_data,
                    file_name=f"military_data_{questionnaire.get('full_name', 'candidate')}_{st.session_state.session_id}.csv",
                    mime="text/csv"
                )
            except Exception as e:
                st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ CSV: {str(e)}")
    
    with col3:
        if st.button("üîÑ –ù–æ–≤–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ", use_container_width=True):
            reset_session()
            st.rerun()
    
    # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
    st.warning("""
    ### ‚öïÔ∏è –í–∞–∂–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    
    **–î–∞–Ω–Ω–æ–µ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –Ω–æ—Å–∏—Ç –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä.**
    
    - –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–æ–ª–∂–Ω—ã —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å—Å—è –≤ –∫–æ–º–ø–ª–µ–∫—Å–µ —Å –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–º –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ–º
    - –ü—Ä–∏ –≤—ã—è–≤–ª–µ–Ω–∏–∏ —Å–µ—Ä—å–µ–∑–Ω—ã—Ö —Ä–∏—Å–∫–æ–≤ —Ç—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
    - –û–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤–æ–µ–Ω–Ω–æ-–≤—Ä–∞—á–µ–±–Ω–æ–π –∫–æ–º–∏—Å—Å–∏–µ–π
    
    üìû **–ü—Ä–∏ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö**: 8-800-2000-122 (–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å)
    """)

def generate_military_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–ª–Ω–æ–≥–æ –≤–æ–µ–Ω–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    questionnaire = st.session_state.questionnaire_responses
    report = []
    
    report.append("–û–¢–ß–ï–¢ –û –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–û–ú –û–ë–°–õ–ï–î–û–í–ê–ù–ò–ò –í–û–ï–ù–ù–û–°–õ–£–ñ–ê–©–ï–ì–û")
    report.append("=" * 60)
    report.append(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}")
    report.append(f"ID –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è: {st.session_state.session_id}")
    report.append("")
    
    # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    report.append("–õ–ò–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    report.append("-" * 20)
    report.append(f"–§–ò–û: {questionnaire.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    report.append(f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {questionnaire.get('birth_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    report.append(f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {questionnaire.get('birth_place', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    report.append(f"–ú–µ—Å—Ç–æ –∂–∏—Ç–µ–ª—å—Å—Ç–≤–∞: {questionnaire.get('residence', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    report.append(f"–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å: {questionnaire.get('nationality', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    report.append(f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {questionnaire.get('education', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    report.append(f"–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ: {questionnaire.get('marital_status', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}")
    report.append("")
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    if hasattr(st.session_state, 'scale_scores') and st.session_state.scale_scores:
        report.append("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø:")
        report.append("-" * 45)
        
        for scale, score in st.session_state.scale_scores.items():
            if scale == 'sincerity':
                continue
            scale_name = SCALE_NAMES.get(scale, scale)
            level = st.session_state.risk_levels_desc.get(scale, '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
            report.append(f"{scale_name}: {score} –±–∞–ª–ª–æ–≤ - {level}")
        
        report.append("")
    
    # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if hasattr(st.session_state, 'recommendations') and st.session_state.recommendations:
        report.append("–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
        report.append("-" * 15)
        for i, rec in enumerate(st.session_state.recommendations, 1):
            clean_rec = ''.join(char for char in rec if ord(char) < 128 or char in '–∞–±–≤–≥–¥–µ—ë–∂–∑–∏–π–∫–ª–º–Ω–æ–ø—Ä—Å—Ç—É—Ñ—Ö—Ü—á—à—â—ä—ã—å—ç—é—è–ê–ë–í–ì–î–ï–Å–ñ–ó–ò–ô–ö–õ–ú–ù–û–ü–†–°–¢–£–§–•–¶–ß–®–©–™–´–¨–≠–Æ–Ø ')
            report.append(f"{i}. {clean_rec}")
        
        report.append("")
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    critical_issues = []
    if questionnaire.get("family_suicides") == "–î–∞" or questionnaire.get("personal_suicides") == "–î–∞":
        critical_issues.append("–°—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã")
    if questionnaire.get("want_serve") == "–ù–µ—Ç":
        critical_issues.append("–ù–µ–∂–µ–ª–∞–Ω–∏–µ —Å–ª—É–∂–∏—Ç—å")
    
    high_risk_scales = []
    if hasattr(st.session_state, 'risk_levels_desc'):
        high_risk_scales = [scale for scale, level in st.session_state.risk_levels_desc.items() if "–≤—ã—Å–æ–∫–∏–π" in level]
    if high_risk_scales:
        critical_issues.append(f"–í—ã—Å–æ–∫–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏")
    
    report.append("–ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï:")
    report.append("-" * 12)
    if critical_issues:
        report.append("–ù–ï –†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ")
        report.append("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã —Ä–∏—Å–∫–∞:")
        for issue in critical_issues:
            report.append(f"- {issue}")
    else:
        report.append("–†–ï–ö–û–ú–ï–ù–î–£–ï–¢–°–Ø –∫ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ –ø—Ä–∏ —Å–æ–±–ª—é–¥–µ–Ω–∏–∏ –º–µ—Ä –ø–æ–¥–¥–µ—Ä–∂–∫–∏")
    
    report.append("")
    report.append("–ü—Å–∏—Ö–æ–ª–æ–≥: ________________")
    report.append(f"–î–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y')}")
    
    return "\n".join(report)

def generate_military_csv():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è CSV —Å –≤–æ–µ–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    questionnaire = st.session_state.questionnaire_responses
    data = []
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    data.append(['–ü–∞—Ä–∞–º–µ—Ç—Ä', '–ó–Ω–∞—á–µ–Ω–∏–µ', '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'])
    
    # –õ–∏—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    personal_data = [
        ('–§–ò–û', questionnaire.get('full_name', ''), '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'),
        ('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è', questionnaire.get('birth_date', ''), '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'),
        ('–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è', questionnaire.get('birth_place', ''), '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'),
        ('–ù–∞—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å', questionnaire.get('nationality', ''), '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'),
        ('–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', questionnaire.get('education', ''), '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ'),
        ('–°–µ–º–µ–π–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ', questionnaire.get('marital_status', ''), '–õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ')
    ]
    
    for item in personal_data:
        data.append(list(item))
    
    # –ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã
    medical_data = [
        ('–ê–ª–∫–æ–≥–æ–ª–∏–∑–º –≤ —Å–µ–º—å–µ', questionnaire.get('family_alcoholism', ''), '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã'),
        ('–ù–∞—Ä–∫–æ–º–∞–Ω–∏—è –≤ —Å–µ–º—å–µ', questionnaire.get('family_drugs', ''), '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã'),
        ('–ü—Å–∏—Ö–∏—á–µ—Å–∫–∏–µ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è –≤ —Å–µ–º—å–µ', questionnaire.get('family_mental', ''), '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã'),
        ('–°—É–∏—Ü–∏–¥—ã –≤ —Å–µ–º—å–µ', questionnaire.get('family_suicides', ''), '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã'),
        ('–õ–∏—á–Ω—ã–µ —Å—É–∏—Ü–∏–¥–∞–ª—å–Ω—ã–µ –º—ã—Å–ª–∏', questionnaire.get('personal_suicides', ''), '–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã'),
        ('–ñ–µ–ª–∞–Ω–∏–µ —Å–ª—É–∂–∏—Ç—å', questionnaire.get('want_serve', ''), '–í–æ–µ–Ω–Ω–∞—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å')
    ]
    
    for item in medical_data:
        data.append(list(item))
    
    # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if hasattr(st.session_state, 'scale_scores') and hasattr(st.session_state, 'risk_levels_desc'):
        for scale in st.session_state.scale_scores.keys():
            if scale == 'sincerity':
                continue
            scale_name = SCALE_NAMES.get(scale, scale)
            score = st.session_state.scale_scores.get(scale, 0)
            level = st.session_state.risk_levels_desc.get(scale, '–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–æ')
            data.append([f"{scale_name} (–±–∞–ª–ª—ã)", score, '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'])
            data.append([f"{scale_name} (—É—Ä–æ–≤–µ–Ω—å)", level, '–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã'])
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ CSV —Å—Ç—Ä–æ–∫—É
    import io
    output = io.StringIO()
    import csv
    writer = csv.writer(output)
    writer.writerows(data)
    return output.getvalue()

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    initialize_session()
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
    with st.sidebar:
        st.header("üìã –ü—Ä–æ–≥—Ä–µ—Å—Å –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è")
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã —ç—Ç–∞–ø–æ–≤
        stages = [
            ("üìù –ê–Ω–∫–µ—Ç–∞", st.session_state.questionnaire_completed),
            ("üß† –°–∫—Ä–∏–Ω–∏–Ω–≥", st.session_state.stage in ['medium_risk_assessment', 'high_risk_assessment', 'results']),
            ("üéØ –£–≥–ª—É–±–ª–µ–Ω–Ω–∞—è –æ—Ü–µ–Ω–∫–∞", st.session_state.stage == 'results' and st.session_state.detailed_results),
            ("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã", st.session_state.stage == 'results')
        ]
        
        for stage_name, completed in stages:
            if completed:
                st.success(f"‚úÖ {stage_name}")
            else:
                st.info(f"‚è≥ {stage_name}")
        
        st.markdown("---")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —ç—Ç–∞–ø–µ
        if st.session_state.stage == 'questionnaire':
            st.info("–ó–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤–æ–µ–Ω–Ω–∞—è –∞–Ω–∫–µ—Ç–∞")
            if st.session_state.questionnaire_responses:
                filled_questions = len([q for q in st.session_state.questionnaire_responses.values() if q])
                st.metric("–û—Ç–≤–µ—Ç–æ–≤ –¥–∞–Ω–æ", filled_questions)
        
        elif st.session_state.stage in ['screening', 'medium_risk_assessment', 'high_risk_assessment']:
            st.info("–ü—Ä–æ—Ö–æ–¥–∏—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
            if st.session_state.questions_order:
                progress = (st.session_state.current_question_index + 1) / len(st.session_state.questions_order)
                st.progress(progress)
                st.metric("–ü—Ä–æ–≥—Ä–µ—Å—Å", f"{st.session_state.current_question_index + 1}/{len(st.session_state.questions_order)}")
        
        elif st.session_state.stage == 'results':
            st.success("–û–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            if st.session_state.questionnaire_responses.get('full_name'):
                st.write(f"**–ö–∞–Ω–¥–∏–¥–∞—Ç**: {st.session_state.questionnaire_responses['full_name']}")
        
        st.markdown("---")
        
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            reset_session()
            st.rerun()
        
        if st.session_state.stage != 'start' and st.button("üè† –í –Ω–∞—á–∞–ª–æ"):
            st.session_state.stage = 'start'
            st.rerun()
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ
        with st.expander("‚ÑπÔ∏è –û —Å–∏—Å—Ç–µ–º–µ"):
            st.markdown("""
            **–°–∏—Å—Ç–µ–º–∞ –≤–æ–µ–Ω–Ω–æ–≥–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è**
            
            - –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –æ—Ü–µ–Ω–∫–∏
            - –ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∞–Ω–∫–µ—Ç—ã –∏ —Ç–µ—Å—Ç–æ–≤
            - –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞ –≤–æ–µ–Ω–Ω–æ–π —Å–ª—É–∂–±–µ
            - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–∫–ª—é—á–µ–Ω–∏–π
            
            **–í–µ—Ä—Å–∏—è**: 1.0  
            **–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ**: 2025
            """)
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–≥–æ —ç–∫—Ä–∞–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ —ç—Ç–∞–ø–∞
    if st.session_state.stage == 'start':
        show_start_screen()
    elif st.session_state.stage == 'questionnaire':
        show_questionnaire()
    elif st.session_state.stage == 'screening':
        show_screening()
    elif st.session_state.stage == 'sincerity_warning':
        show_sincerity_warning()
    elif st.session_state.stage == 'medium_risk_assessment' or st.session_state.stage == 'high_risk_assessment':
        show_detailed_assessment()
    elif st.session_state.stage == 'results':
        show_results()
    else:
        st.error("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —ç—Ç–∞–ø –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        if st.button("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ"):
            reset_session()
            st.rerun()

# –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
if __name__ == "__main__":
    main()